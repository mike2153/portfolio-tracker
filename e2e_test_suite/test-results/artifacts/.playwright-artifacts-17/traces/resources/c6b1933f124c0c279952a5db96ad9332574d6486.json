[{"status":"fulfilled","value":{"originalStackFrame":{"file":"../src/client/components/errors/console-error.ts","lineNumber":18,"column":35,"methodName":"createConsoleError","arguments":[],"ignored":true},"originalCodeFrame":"  16 | ): ConsoleError {\n  17 |   const error = (\n> 18 |     typeof message === 'string' ? new Error(message) : message\n     |                                   ^\n  19 |   ) as ConsoleError\n  20 |   error[digestSym] = 'NEXT_CONSOLE_ERROR'\n  21 |   error[consoleTypeSym] = typeof message === 'string' ? 'string' : 'error'"}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"../src/client/components/errors/use-error-handler.ts","lineNumber":30,"column":13,"methodName":"handleConsoleError","arguments":[],"ignored":true},"originalCodeFrame":"  28 |     error = createConsoleError(originError, environmentName)\n  29 |   } else {\n> 30 |     error = createConsoleError(\n     |             ^\n  31 |       formatConsoleArgs(consoleErrorArgs),\n  32 |       environmentName\n  33 |     )"}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"../src/client/components/globals/intercept-console-error.ts","lineNumber":32,"column":9,"methodName":"console.error","arguments":[],"ignored":true},"originalCodeFrame":"  30 |     if (!isNextRouterError(maybeError)) {\n  31 |       if (process.env.NODE_ENV !== 'production') {\n> 32 |         handleConsoleError(\n     |         ^\n  33 |           // replayed errors have their own complex format string that should be used,\n  34 |           // but if we pass the error directly, `handleClientError` will ignore it\n  35 |           maybeError,"}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":4625,"column":1,"methodName":"eval","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":844,"column":1,"methodName":"runWithFiberInDEV","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":4624,"column":1,"methodName":"emitPendingHydrationWarnings","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":11256,"column":1,"methodName":"completeWork","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":847,"column":1,"methodName":"runWithFiberInDEV","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":15393,"column":1,"methodName":"completeUnitOfWork","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":15274,"column":1,"methodName":"performUnitOfWork","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":15251,"column":1,"methodName":"workLoopConcurrentByScheduler","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":15226,"column":1,"methodName":"renderRootConcurrent","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":14524,"column":1,"methodName":"performWorkOnRoot","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/react-dom/cjs/react-dom-client.development.js","lineNumber":16349,"column":1,"methodName":"performWorkOnRootViaSchedulerTask","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"node_modules/next/dist/compiled/scheduler/cjs/scheduler.development.js","lineNumber":45,"column":1,"methodName":"MessagePort.performWorkUntilDeadline","arguments":[],"ignored":true},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"<anonymous>","lineNumber":0,"column":0,"methodName":"input","ignored":false,"arguments":[]},"originalCodeFrame":null}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"src/app/auth/page.tsx","lineNumber":129,"column":15,"methodName":"AuthPage","arguments":[],"ignored":false},"originalCodeFrame":"  127 |                 Email Address *\n  128 |               </label>\n> 129 |               <input\n      |               ^\n  130 |                 id=\"email\"\n  131 |                 name=\"email\"\n  132 |                 type=\"email\""}},{"status":"fulfilled","value":{"originalStackFrame":{"file":"../src/client/components/client-page.tsx","lineNumber":60,"column":12,"methodName":"ClientPageRoot","arguments":[],"ignored":true},"originalCodeFrame":"  58 |     const clientParams = createRenderParamsFromClient(params)\n  59 |\n> 60 |     return <Component params={clientParams} searchParams={clientSearchParams} />\n     |            ^\n  61 |   }\n  62 | }\n  63 |"}}]