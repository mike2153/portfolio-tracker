TITLE: Avoid Experimental Class Properties and Arrow Functions in React Components
DESCRIPTION: This JavaScript code snippet demonstrates the use of experimental class properties for state initialization and arrow functions for class methods. These features are not yet standardized in JavaScript and should generally be avoided in React documentation examples unless the purpose is specifically to describe an experimental proposal.
SOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: javascript
CODE:
```
class MyComponent extends React.Component {
  state = {value: ''};
  handleChange = (e) => {
    this.setState({value: e.target.value});
  };
}
```

----------------------------------------

TITLE: Standard Method Definition and Binding in React Class Components
DESCRIPTION: This JavaScript code snippet illustrates the preferred and standardized approach for defining methods in React class components. It uses a constructor to initialize state and bind `this` to the event handler, followed by a traditional function declaration for the method, ensuring compatibility and adherence to established JavaScript practices.
SOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: javascript
CODE:
```
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.state = {value: ''};
  }
  handleChange(e) {
    this.setState({value: e.target.value});
  }
}
```

----------------------------------------

TITLE: Basic JavaScript Code Block in Markdown
DESCRIPTION: Demonstrates the standard way to embed a JavaScript code block within Markdown, using `js` for syntax highlighting. This is the fundamental structure for all code examples.
SOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: markdown
CODE:
```
```js
// code
```
```

----------------------------------------

TITLE: Highlighting a Single Line in JavaScript Code
DESCRIPTION: Shows how to highlight a specific line in a JavaScript code block using the `{line_number}` syntax appended to the language identifier in Markdown. This focuses the reader's attention on a single important line.
SOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: markdown
CODE:
```
```js {2}
function hello() {
  // this line will get highlighted
}
```
```

----------------------------------------

TITLE: Highlighting a Range of Lines in JavaScript Code
DESCRIPTION: Illustrates how to highlight a continuous range of lines in a JavaScript code block using the `{start-end}` syntax in Markdown. This is useful for emphasizing a block of related code.
SOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#_snippet_4

LANGUAGE: markdown
CODE:
```
```js {2-4}
function hello() {
  // these lines
  // will get
  // highlighted
}
```
```

----------------------------------------

TITLE: Highlighting Multiple Ranges in JavaScript Code
DESCRIPTION: Demonstrates how to highlight non-contiguous lines or multiple ranges in a JavaScript code block using comma-separated `{range1,range2}` syntax in Markdown. This allows for flexible highlighting of disparate but related code sections.
SOURCE: https://github.com/reactjs/react.dev/blob/main/CONTRIBUTING.md#_snippet_5

LANGUAGE: markdown
CODE:
```
```js {2-4,6}
function hello() {
  // these lines
  // will get
  // highlighted
  console.log('hello');
  // also this one
  console.log('there');
}
```
```

----------------------------------------

TITLE: Install React.dev Project Dependencies
DESCRIPTION: Instructions to navigate into the project directory and install the necessary npm dependencies using Yarn. This step is crucial for setting up the development environment.
SOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
cd react.dev
yarn
```

----------------------------------------

TITLE: Run React.dev Website Locally
DESCRIPTION: Commands to start the development server for the react.dev website, which is powered by Next.js, and then automatically open the site in your default web browser for local testing and development.
SOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn dev
open http://localhost:3000
```

----------------------------------------

TITLE: Create a New Git Branch for Contribution
DESCRIPTION: Steps to ensure your local 'main' branch is up-to-date with the remote repository, followed by creating a new feature branch. This new branch is where you will make your contributions, isolating changes from the main codebase.
SOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
git checkout main
git pull origin main
git checkout -b the-name-of-my-branch
```

----------------------------------------

TITLE: Test Local Code Changes
DESCRIPTION: Command to run a comprehensive suite of checks including Prettier for code formatting, ESLint for linting, and type validation. This ensures that your changes adhere to the project's coding standards and maintain type safety.
SOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
yarn check-all
```

----------------------------------------

TITLE: Stage, Commit, and Push Git Changes
DESCRIPTION: Commands to stage all modified files, commit them with a descriptive message, and then push the new branch to your remote fork. This prepares your changes for a pull request, making them available for review.
SOURCE: https://github.com/reactjs/react.dev/blob/main/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
git add -A && git commit -m "My message"
git push my-fork-name the-name-of-my-branch
```

----------------------------------------

TITLE: Render Hello World with ReactDOM
DESCRIPTION: This snippet initializes a basic React application, rendering an H1 element containing 'Hello, world!' into a DOM element with the ID 'root'. It requires React and ReactDOM libraries to be included in the project for proper execution.
SOURCE: https://github.com/reactjs/react.dev/blob/main/public/html/single-file-example.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
ReactDOM.render( <h1>Hello, world!</h1>, document.getElementById('root') );
```

----------------------------------------

TITLE: Install React 18 Release Candidate
DESCRIPTION: This command installs the React 18 Release Candidate and React DOM Release Candidate packages using npm. It allows developers to try out the upcoming stable version of React before its official release.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2021/12/17/react-conf-2021-recap.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install react@rc react-dom@rc
```

----------------------------------------

TITLE: Migrate to React 18 createRoot API
DESCRIPTION: This JavaScript code snippet illustrates the necessary change when migrating from the legacy `ReactDOM.render` API to the new `ReactDOM.createRoot` API in React 18. The `createRoot` API is essential for enabling concurrent features and is the recommended way to initialize a React application.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2021/12/17/react-conf-2021-recap.md#_snippet_1

LANGUAGE: js
CODE:
```
// before
const container = document.getElementById('root');
ReactDOM.render(<App />, container);

// after
const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render(<App/>);
```

----------------------------------------

TITLE: Install React 18 dependencies using npm or Yarn
DESCRIPTION: Instructions to install or upgrade React and ReactDOM packages to version 18 using either npm or Yarn package managers. This is the first step to begin the upgrade process.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install react react-dom
```

LANGUAGE: bash
CODE:
```
yarn add react react-dom
```

----------------------------------------

TITLE: Upgrade client rendering from ReactDOM.render to createRoot
DESCRIPTION: React 18 introduces a new root API which provides better ergonomics for managing roots and enables the new concurrent renderer. This snippet demonstrates how to migrate from the legacy `ReactDOM.render` to the new `createRoot` API for client-side rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_1

LANGUAGE: js
CODE:
```
// Before
import { render } from 'react-dom';
const container = document.getElementById('app');
render(<App tab="home" />, container);
```

LANGUAGE: js
CODE:
```
// After
import { createRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = createRoot(container); // createRoot(container!) if you use TypeScript
root.render(<App tab="home" />);
```

----------------------------------------

TITLE: Migrate unmountComponentAtNode to root.unmount
DESCRIPTION: With the introduction of the new root API in React 18, the method for unmounting components has been updated. This snippet illustrates the migration from the deprecated `unmountComponentAtNode` function to the new `root.unmount` method, which is part of the root instance.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_2

LANGUAGE: js
CODE:
```
// Before
unmountComponentAtNode(container);
```

LANGUAGE: js
CODE:
```
// After
root.unmount();
```

----------------------------------------

TITLE: Replace render callback with useEffect in React 18
DESCRIPTION: React 18 removes the callback from `render` as it often did not produce the expected result when using Suspense. This snippet shows how to achieve similar post-render effects by using a `useEffect` hook within a component, which is the recommended approach in React 18.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_3

LANGUAGE: js
CODE:
```
// Before
const container = document.getElementById('app');
render(<App tab="home" />, container, () => {
  console.log('rendered');
});
```

LANGUAGE: js
CODE:
```
// After
function AppWithCallbackAfterRender() {
  useEffect(() => {
    console.log('rendered');
  });

  return <App tab="home" />
}

const container = document.getElementById('app');
const root = createRoot(container);
root.render(<AppWithCallbackAfterRender />);
```

----------------------------------------

TITLE: Upgrade server-side rendering from hydrate to hydrateRoot
DESCRIPTION: For applications that utilize server-side rendering (SSR) with hydration, React 18 introduces `hydrateRoot` as the new API. This snippet demonstrates the necessary transition from the older `hydrate` method to `hydrateRoot` for proper SSR hydration in React 18.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_4

LANGUAGE: js
CODE:
```
// Before
import { hydrate } from 'react-dom';
const container = document.getElementById('app');
hydrate(<App tab="home" />, container);
```

LANGUAGE: js
CODE:
```
// After
import { hydrateRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = hydrateRoot(container, <App tab="home" />);
// Unlike with createRoot, you don't need a separate root.render() call here.
```

----------------------------------------

TITLE: React 18 Server Rendering API Changes and Status
DESCRIPTION: React 18 introduces significant changes to its server rendering APIs to support Suspense and Streaming SSR. This includes deprecating `renderToNodeStream`, introducing new streaming APIs like `renderToPipeableStream` for Node and `renderToReadableStream` for edge environments, and clarifying the limited Suspense support for existing APIs like `renderToString` and `renderToStaticMarkup`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
react-dom/server APIs:
  renderToNodeStream: Deprecated (does not support incremental Suspense streaming)
  renderToPipeableStream: New (for streaming in Node environments)
  renderToReadableStream: New (for streaming SSR with Suspense in modern edge runtimes like Deno, Cloudflare workers)
  renderToString: Limited (limited support for Suspense)
  renderToStaticMarkup: Limited (limited support for Suspense)
  renderToStaticNodeStream: Continues to work (for rendering e-mails)
```

----------------------------------------

TITLE: React 18 TypeScript Definition for Children Prop
DESCRIPTION: With React 18, TypeScript projects must update their `@types/react` and `@types/react-dom` dependencies. A notable change is the requirement to explicitly list the `children` prop when defining component props, enhancing type safety and catching previously ignored type issues.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_6

LANGUAGE: typescript
CODE:
```
interface MyButtonProps {
  color: string;
  children?: React.ReactNode;
}
```

----------------------------------------

TITLE: Automatic Batching Behavior Before React 18
DESCRIPTION: Prior to React 18, state updates were only batched when initiated within React event handlers. Updates triggered by asynchronous operations like `setTimeout` or promises, or by native event handlers, would result in multiple, unbatched re-renders, potentially impacting performance.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_7

LANGUAGE: javascript
CODE:
```
// Before React 18 only React events were batched

function handleClick() {
  setCount(c => c + 1);
  setFlag(f => !f);
  // React will only re-render once at the end (that's batching!)
}

setTimeout(() => {
  setCount(c => c + 1);
  setFlag(f => !f);
  // React will render twice, once for each state update (no batching)
}, 1000);
```

----------------------------------------

TITLE: Automatic Batching Behavior After React 18
DESCRIPTION: Starting with React 18 and `createRoot`, all state updates are automatically batched by default, regardless of their origin. This means updates from `setTimeout`, promises, or native event handlers will now be batched into a single re-render, significantly improving application performance.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_8

LANGUAGE: javascript
CODE:
```
// After React 18 updates inside of timeouts, promises,
// native event handlers or any other event are batched.

function handleClick() {
  setCount(c => c + 1);
  setFlag(f => !f);
  // React will only re-render once at the end (that's batching!)
}

setTimeout(() => {
  setCount(c => c + 1);
  setFlag(f => !f);
  // React will only re-render once at the end (that's batching!)
}, 1000);
```

----------------------------------------

TITLE: Opting Out of Automatic Batching with flushSync
DESCRIPTION: While automatic batching is generally beneficial, developers can opt out of it for specific updates using the `flushSync` utility from `react-dom`. This function forces React to immediately apply any pending state updates and re-render the DOM synchronously, ensuring that the DOM is updated before the next line of code executes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { flushSync } from 'react-dom';

function handleClick() {
  flushSync(() => {
    setCounter(c => c + 1);
  });
  // React has updated the DOM by now
  flushSync(() => {
    setFlag(f => !f);
  });
  // React has updated the DOM by now
}
```

----------------------------------------

TITLE: React 18 Concurrent Rendering Hooks for Libraries
DESCRIPTION: Documentation for new React 18 Hooks (`useSyncExternalStore`, `useInsertionEffect`) designed to support concurrent rendering in libraries, particularly for external state management and CSS-in-JS solutions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
useSyncExternalStore:
  Description: A new Hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous.
  Recommendation: Recommended for any library that integrates with state external to React.

useInsertionEffect:
  Description: A new Hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render.
  Execution: Runs after the DOM is mutated, but before layout effects read the new layout.
  Purpose: Solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering.
```

----------------------------------------

TITLE: Configure React Testing Environment for `act`
DESCRIPTION: Sets a global flag (`globalThis.IS_REACT_ACT_ENVIRONMENT`) to `true` in a test setup file. This informs React that it's running in a unit test-like environment, enabling helpful warnings if updates are not wrapped with `act`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_11

LANGUAGE: js
CODE:
```
globalThis.IS_REACT_ACT_ENVIRONMENT = true;
```

----------------------------------------

TITLE: React DOM Server Suspension Behavior Changes
DESCRIPTION: This section documents the updated behavior of `renderToString` and `renderToStaticMarkup` when a component suspends on the server. It explains how these functions now handle suspension by emitting fallback HTML and provides recommendations for migrating to streaming APIs.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/08/react-18-upgrade-guide.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
renderToString:
  Description: Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest <Suspense> boundary and then retry rendering the same content on the client.
  Recommendation: It is still recommended that you switch to a streaming API like renderToPipeableStream or renderToReadableStream instead.

renderToStaticMarkup:
  Description: Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest <Suspense> boundary.
```

----------------------------------------

TITLE: React 18 Automatic Batching Example
DESCRIPTION: This JavaScript code demonstrates the automatic batching feature introduced in React 18. It shows how multiple state updates, even those initiated outside of React event handlers (e.g., within `setTimeout`), are automatically batched into a single re-render for improved performance, contrasting with previous behavior.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Before: only React events were batched.
setTimeout(() => {
  setCount(c => c + 1);
  setFlag(f => !f);
  // React will render twice, once for each state update (no batching)
}, 1000);

// After: updates inside of timeouts, promises,
// native event handlers or any other event are batched.
setTimeout(() => {
  setCount(c => c + 1);
  setFlag(f => !f);
  // React will only re-render once at the end (that's batching!)
}, 1000);
```

----------------------------------------

TITLE: Using `startTransition` for Non-Urgent UI Updates in React
DESCRIPTION: This JavaScript example illustrates the use of React's `startTransition` API. It demonstrates how to wrap non-urgent state updates (like setting a search query) within `startTransition` to allow React to prioritize urgent updates (like input value changes) and ensure a responsive user interface during concurrent rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { startTransition } from 'react';

// Urgent: Show what was typed
setInputValue(input);

// Mark any state updates inside as transitions
startTransition(() => {
  // Transition: Show the results
  setSearchQuery(input);
});
```

----------------------------------------

TITLE: React Suspense Component with Fallback UI
DESCRIPTION: This JSX code snippet shows the basic usage of the React `Suspense` component. It allows developers to declaratively specify a fallback UI (e.g., a `<Spinner />`) to be displayed while a child component (`<Comments />`) is asynchronously loading or not yet ready to render.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_2

LANGUAGE: javascript
CODE:
```
<Suspense fallback={<Spinner />}>
  <Comments />
</Suspense>
```

----------------------------------------

TITLE: React Transitions API Reference: `useTransition` and `startTransition`
DESCRIPTION: This API documentation outlines the two primary methods for implementing transitions in React: `useTransition` and `startTransition`. It details their purpose in managing urgent versus non-urgent updates, enabling concurrent rendering, and improving user experience by allowing interruptible UI changes.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
useTransition:
  - Type: React Hook
  - Purpose: Provides a way to start transitions and track their pending state.
  - Returns: An array containing `[isPending, startTransition]`.
    - `isPending`: A boolean indicating if a transition is currently active.
    - `startTransition`: A function to wrap non-urgent state updates.
  - Usage: `const [isPending, startTransition] = useTransition();`

startTransition:
  - Type: React API Method
  - Purpose: Marks state updates inside its callback as non-urgent transitions.
  - Parameters:
    - `callback`: A function containing the state updates to be treated as a transition.
  - Usage: `startTransition(() => { /* non-urgent updates */ });`
  - Note: Useful when `useTransition` hook cannot be used (e.g., outside a component).
```

----------------------------------------

TITLE: React 18 DOM Client APIs: createRoot and hydrateRoot
DESCRIPTION: This section introduces the new `createRoot` and `hydrateRoot` APIs in `react-dom/client` for React 18. These methods replace `ReactDOM.render` and `ReactDOM.hydrate` respectively, enabling new React 18 features. Both accept an `onRecoverableError` option for logging rendering or hydration errors.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
react-dom/client:
  createRoot(container: Element, options?: object): Root
    description: Creates a root for rendering React elements.
    replaces: ReactDOM.render
    options:
      onRecoverableError?: (error: Error) => void
        description: Callback for errors during rendering/hydration.
        default: reportError or console.error
  hydrateRoot(container: Element, initialChildren: ReactNode, options?: object): Root
    description: Hydrates a server-rendered application.
    replaces: ReactDOM.hydrate
    options:
      onRecoverableError?: (error: Error) => void
        description: Callback for errors during rendering/hydration.
        default: reportError or console.error
```

----------------------------------------

TITLE: React 18 DOM Server APIs for Streaming
DESCRIPTION: This section details the new streaming APIs exported from `react-dom/server` in React 18. `renderToPipeableStream` is for Node environments, while `renderToReadableStream` is for modern edge runtimes like Deno and Cloudflare workers. These APIs offer full support for streaming Suspense on the server, replacing the discouraged `renderToString`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
react-dom/server:
  renderToPipeableStream(element: ReactElement, options?: object): { pipe: (writable: Writable) => void, abort: () => void }
    description: For streaming in Node environments.
  renderToReadableStream(element: ReactElement, options?: object): ReadableStream
    description: For modern edge runtime environments (Deno, Cloudflare workers).
```

----------------------------------------

TITLE: React 18 Strict Mode Development Remounting Simulation
DESCRIPTION: React 18 introduces a new development-only check in Strict Mode to prepare components for future features that preserve state across UI unmounts/remounts. This check automatically unmounts and remounts components, restoring previous state, to help surface issues where effects assume they are only mounted or destroyed once. This ensures components are resilient to multiple effect lifecycles.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_6

LANGUAGE: text
CODE:
```
Before React 18 Strict Mode:
* React mounts the component.
  * Layout effects are created.
  * Effects are created.

With React 18 Strict Mode (development mode):
* React mounts the component.
  * Layout effects are created.
  * Effects are created.
* React simulates unmounting the component.
  * Layout effects are destroyed.
  * Effects are destroyed.
* React simulates mounting the component with the previous state.
  * Layout effects are created.
  * Effects are created.
```

----------------------------------------

TITLE: React 18 useId Hook for Unique IDs
DESCRIPTION: `useId` is a new React Hook designed to generate unique IDs on both the client and server, preventing hydration mismatches. It is particularly useful for component libraries that integrate with accessibility APIs requiring unique identifiers. It is explicitly noted that `useId` should not be used for generating keys in lists, as keys should derive from data.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
useId(): string
  description: Generates a unique ID for client and server, avoiding hydration mismatches.
  purpose: Primarily for accessibility APIs requiring unique IDs.
  note: Not for generating keys in lists.
```

----------------------------------------

TITLE: React 18 useTransition Hook for Non-Urgent Updates
DESCRIPTION: The `useTransition` Hook, along with `startTransition`, allows developers to mark certain state updates as non-urgent. This enables React to prioritize urgent state updates, such as text input changes, by allowing them to interrupt non-urgent updates like rendering large lists. This improves responsiveness by ensuring critical UI interactions remain fluid.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
useTransition(): [isPending: boolean, startTransition: (callback: () => void) => void]
  description: Lets you mark some state updates as not urgent.
  returns:
    isPending: boolean - True if a transition is pending.
    startTransition: (callback: () => void) => void - Function to wrap non-urgent updates.
  behavior: Urgent updates can interrupt non-urgent updates.
```

----------------------------------------

TITLE: React 18 useDeferredValue Hook for Deferred Rendering
DESCRIPTION: `useDeferredValue` is a React Hook that defers the re-rendering of a non-urgent part of the component tree. It offers advantages over traditional debouncing by having no fixed time delay, attempting the deferred render immediately after the initial render is visible, and being interruptible. This ensures that user input is not blocked, maintaining a smooth user experience.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
useDeferredValue<T>(value: T): T
  description: Defers re-rendering a non-urgent part of the tree.
  comparison: Similar to debouncing, but without fixed delay.
  behavior:
    - Attempts deferred render after first render is visible.
    - Interruptible.
    - Does not block user input.
```

----------------------------------------

TITLE: Introduce useTransition and useDeferredValue Hooks in React
DESCRIPTION: These new React hooks allow developers to separate urgent UI updates from less urgent, transitional updates, improving responsiveness. `useTransition` initiates a transition, while `useDeferredValue` defers updating a value until a transition is complete.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
useTransition(): Hook to mark state updates as transitions, allowing non-urgent UI updates to be interrupted.
useDeferredValue(value): Hook to defer updating a value, returning an outdated value during a transition.
```

----------------------------------------

TITLE: Add useId Hook for Generating Unique IDs in React
DESCRIPTION: The `useId` hook provides a stable, unique ID that is guaranteed to be the same on both the server and client, making it useful for accessibility attributes like `id` and `for`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
useId(): Hook to generate a unique, stable ID for accessibility attributes.
```

----------------------------------------

TITLE: Integrate External Stores with React using useSyncExternalStore
DESCRIPTION: This hook facilitates integration of external state management libraries with React, ensuring that updates from external stores are synchronized with React's rendering cycle efficiently.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?): Hook to subscribe to an external store, ensuring React components re-render when the store changes.
```

----------------------------------------

TITLE: Introduce startTransition API for Non-Urgent Updates in React
DESCRIPTION: An imperative version of `useTransition` that allows marking updates as non-urgent without providing pending feedback, useful for scenarios where a hook cannot be used.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
startTransition(callback): Function to mark updates inside the callback as non-urgent transitions.
```

----------------------------------------

TITLE: Add useInsertionEffect Hook for CSS-in-JS Libraries in React
DESCRIPTION: This hook is specifically designed for CSS-in-JS libraries to inject styles into the DOM before any layout effects are run, preventing flashes of unstyled content.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
useInsertionEffect(setup, dependencies?): Hook for CSS-in-JS libraries to inject styles before layout effects.
```

----------------------------------------

TITLE: Suspense Remounts Layout Effects on Content Reappearance in React
DESCRIPTION: React's Suspense component now ensures that layout effects are correctly remounted when the suspended content reappears, improving consistency and preventing issues with stale layouts.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
Suspense behavior update: Layout effects within Suspense boundaries are now remounted when content reappears after suspension.
```

----------------------------------------

TITLE: StrictMode Re-runs Effects to Check for Restorable State in React
DESCRIPTION: In StrictMode, React now re-runs effects to verify that components can restore their state correctly, aiding in identifying potential issues with state management and ensuring forward compatibility.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
StrictMode behavior update: Effects are re-run to validate component state restorability.
```

----------------------------------------

TITLE: React Assumes Symbols are Always Available
DESCRIPTION: React now assumes that the `Symbol` global object is always available in the environment, simplifying internal implementations and potentially reducing bundle size by removing polyfills.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
Internal change: React now assumes `Symbol` is globally available.
```

----------------------------------------

TITLE: React Removes object-assign Polyfill
DESCRIPTION: The `object-assign` polyfill has been removed, indicating that React now relies on native `Object.assign` support or expects it to be polyfilled by the user's build environment.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_18

LANGUAGE: APIDOC
CODE:
```
Internal change: `object-assign` polyfill removed.
```

----------------------------------------

TITLE: React Removes Unsupported unstable_changedBits API
DESCRIPTION: The `unstable_changedBits` API, which was an experimental and unsupported feature, has been removed from React, streamlining the API surface.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_19

LANGUAGE: APIDOC
CODE:
```
API Removal: `unstable_changedBits` is no longer supported.
```

----------------------------------------

TITLE: React Components Can Now Render Undefined
DESCRIPTION: Components are now permitted to return `undefined` from their render method, aligning its behavior with `null` for empty rendering and providing more flexibility.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
Rendering behavior update: Components can now return `undefined` from render.
```

----------------------------------------

TITLE: Flush useEffect from Discrete Events Synchronously in React
DESCRIPTION: React now synchronously flushes `useEffect` hooks that are triggered by discrete events like clicks, ensuring more predictable and immediate side effects in response to user interactions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_21

LANGUAGE: APIDOC
CODE:
```
Behavior update: `useEffect` triggered by discrete events (e.g., clicks) now flushes synchronously.
```

----------------------------------------

TITLE: Suspense fallback={undefined} Behaves as null in React
DESCRIPTION: The `fallback` prop of Suspense now treats `undefined` the same as `null`, meaning it will no longer be ignored and will correctly trigger the fallback behavior when content is not ready.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_22

LANGUAGE: APIDOC
CODE:
```
Suspense behavior update: `fallback={undefined}` now behaves identically to `fallback={null}`.
```

----------------------------------------

TITLE: React Considers lazy() Components Resolving to Same Component Equivalent
DESCRIPTION: React now correctly identifies `lazy()` components as equivalent if they resolve to the same underlying component, improving memoization and reconciliation performance.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
Optimization: `lazy()` components resolving to the same underlying component are now considered equivalent.
```

----------------------------------------

TITLE: React No Longer Patches Console During First Render
DESCRIPTION: React has stopped patching the console object during the initial render, which can prevent unexpected side effects or conflicts with other libraries that modify the console.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_24

LANGUAGE: APIDOC
CODE:
```
Internal change: Console patching during first render has been removed.
```

----------------------------------------

TITLE: React Improves Memory Usage
DESCRIPTION: General improvements have been made to React's internal memory management, leading to reduced memory consumption and better performance, especially in long-running applications.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_25

LANGUAGE: APIDOC
CODE:
```
Performance improvement: Reduced memory footprint.
```

----------------------------------------

TITLE: React Improves Error Messages for String Coercion
DESCRIPTION: Error messages related to string coercion, particularly for types like `Temporal.*` or `Symbol`, have been enhanced to provide clearer diagnostics and aid in debugging.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2022/03/29/react-v18.md#_snippet_26

LANGUAGE: APIDOC
CODE:
```
Error handling improvement: More informative messages when string coercion fails (e.g., for `Temporal.*`, `Symbol`).
```

----------------------------------------

TITLE: React Tic-Tac-Toe Game Logic and Components
DESCRIPTION: This JavaScript code snippet implements the core logic and UI components for a Tic-Tac-Toe game using React. It includes functional components for individual squares, the game board, and the main game application, demonstrating state management with `useState`, event handling, and a utility function to determine the winner.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_0

LANGUAGE: js
CODE:
```
import { useState } from 'react';

function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

export default function Game() {
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const xIsNext = currentMove % 2 === 0;
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
  }

  function jumpTo(nextMove) {
    setCurrentMove(nextMove);
  }

  const moves = history.map((squares, move) => {
    let description;
    if (move > 0) {
      description = 'Go to move #' + move;
    } else {
      description = 'Go to game start';
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}
```

----------------------------------------

TITLE: Tic-Tac-Toe Game Styling with CSS
DESCRIPTION: This CSS snippet provides the visual styling for the React Tic-Tac-Toe game. It defines properties for the overall layout, individual square buttons, board rows, and status messages, ensuring a clean and functional appearance for the game interface.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_1

LANGUAGE: css
CODE:
```
* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  margin: 20px;
  padding: 0;
}

.square {
  background: #fff;
  border: 1px solid #999;
  float: left;
  font-size: 24px;
  font-weight: bold;
  line-height: 34px;
  height: 34px;
  margin-right: -1px;
  margin-top: -1px;
  padding: 0;
  text-align: center;
  width: 34px;
}

.board-row:after {
  clear: both;
  content: '';
  display: table;
}

.status {
  margin-bottom: 10px;
}
.game {
  display: flex;
  flex-direction: row;
}

.game-info {
  margin-left: 20px;
}
```

----------------------------------------

TITLE: React Component: Packing List Challenge - Initial State
DESCRIPTION: An initial React component for a packing list. It displays item names and a '✅' for packed items. The challenge is to modify this code to show a '❌' for items that are not packed, using the conditional operator.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function Item({ name, isPacked }) {
  return (
    <li className="item">
      {name} {isPacked && '✅'}
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          isPacked={true} 
          name="Space suit" 
        />
        <Item 
          isPacked={true} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          isPacked={false} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: React Component: Packing List Challenge - Conditional Rendering Solution
DESCRIPTION: The solution to the packing list challenge, demonstrating how to use the conditional operator (`? :`) in React. This component renders a '✅' for packed items and a '❌' for unpacked items, providing a complete visual status for each item.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function Item({ name, isPacked }) {
  return (
    <li className="item">
      {name} {isPacked ? '✅' : '❌'}
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          isPacked={true} 
          name="Space suit" 
        />
        <Item 
          isPacked={true} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          isPacked={false} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: Initial React Component for Item List
DESCRIPTION: This code snippet presents the basic structure of `Item` and `PackingList` React components. It sets up a list of items, each with a `name` and `importance` prop, serving as the starting point before implementing conditional display logic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function Item({ name, importance }) {
  return (
    <li className="item">
      {name}
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          importance={9} 
          name="Space suit" 
        />
        <Item 
          importance={0} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          importance={6} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: React Conditional Rendering with Logical AND (&&)
DESCRIPTION: This solution demonstrates how to conditionally render the importance of an item using the `importance > 0 && ...` pattern. It ensures that the importance value is only displayed for items with a non-zero importance, correctly handling spacing and rendering an italicized label.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_5

LANGUAGE: javascript
CODE:
```
function Item({ name, importance }) {
  return (
    <li className="item">
      {name}
      {importance > 0 && ' '}
      {importance > 0 &&
        <i>(Importance: {importance})</i>
      }
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          importance={9} 
          name="Space suit" 
        />
        <Item 
          importance={0} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          importance={6} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}
```

----------------------------------------

TITLE: Counter (number) with useState
DESCRIPTION: This example demonstrates how to use the `useState` Hook to manage a numeric state variable. Clicking the button increments the `count` state, showcasing a basic counter implementation in React.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_6

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}
```

----------------------------------------

TITLE: Text Field (string) with useState
DESCRIPTION: This example illustrates managing a string state variable using `useState` for a text input field. The `handleChange` function updates the state with the latest input value, and the current text is displayed below the input, demonstrating controlled components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_7

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function MyInput() {
  const [text, setText] = useState('hello');

  function handleChange(e) {
    setText(e.target.value);
  }

  return (
    <>
      <input value={text} onChange={handleChange} />
      <p>You typed: {text}</p>
      <button onClick={() => setText('hello')}>
        Reset
      </button>
    </>
  );
}
```

----------------------------------------

TITLE: Checkbox (boolean) with useState
DESCRIPTION: This example shows how to use `useState` to manage a boolean state variable for a checkbox. The `handleChange` function updates the `liked` state based on the checkbox's checked status, which then conditionally renders text below the checkbox.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_8

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function MyCheckbox() {
  const [liked, setLiked] = useState(true);

  function handleChange(e) {
    setLiked(e.target.checked);
  }

  return (
    <>
      <label>
        <input
          type="checkbox"
          checked={liked}
          onChange={handleChange}
        />
        I liked this
      </label>
      <p>You {liked ? 'liked' : 'did not like'} this.</p>
    </>
  );
}
```

----------------------------------------

TITLE: Form with Multiple useState Variables
DESCRIPTION: This example demonstrates declaring and managing multiple independent state variables within the same component using `useState`. It shows how to handle separate input fields and buttons that modify different state variables, such as name and age, independently.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2023/03/16/introducing-react-dev.md#_snippet_9

LANGUAGE: js
CODE:
```
import { useState } from 'react';

export default function Form() {
  const [name, setName] = useState('Taylor');
  const [age, setAge] = useState(42);

  return (
    <>
      <input
        value={name}
        onChange={e => setName(e.target.value)}
      />
      <button onClick={() => setAge(age + 1)}>
        Increment age
      </button>
      <p>Hello, {name}. You are {age}.</p>
    </>
  );
}
```

LANGUAGE: css
CODE:
```
button { display: block; margin-top: 10px; }
```

----------------------------------------

TITLE: React Form with Action Prop
DESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `action` prop on a React `<form/>` element. It shows how to link a form directly to a JavaScript function (`search` in this example) that will handle the form submission, simplifying data flow and leveraging React's built-in lifecycle management for actions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024.md#_snippet_0

LANGUAGE: js
CODE:
```
<form action={search}>
  <input name="query" />
  <button type="submit">Search</button>
</form>
```

----------------------------------------

TITLE: React Actions Related Hooks API Reference
DESCRIPTION: This section provides an API overview of key React hooks associated with the Actions feature, detailing their purpose and how they assist in managing form submission status, action state, and optimistic UI updates.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
useFormStatus():
  Description: A hook to access the current state and response of the form action, specifically related to the submission status of the parent <form>.
  Returns: An object containing properties like `pending` (boolean), `data` (FormData), `method` (string), and `action` (string or URL).

useActionState(action: Function, initialState: any):
  Description: A hook that allows you to manage the state and response of a form action.
  Parameters:
    action: The function to be executed when the form is submitted.
    initialState: The initial state value for the action.
  Returns: A tuple containing the current state and a dispatch function to trigger the action.

useOptimistic(initialState: any, reducer?: Function):
  Description: A hook for managing optimistic state updates. It allows you to apply temporary updates that are automatically reverted once the final state commits.
  Parameters:
    initialState: The initial state value for the optimistic update.
    reducer (optional): A function that takes the current state and the optimistic value, and returns the new optimistic state.
  Usage: Enables instant UI feedback for actions like form submissions, assuming success, and then reconciling with the actual server response.
```

----------------------------------------

TITLE: Outdated JSX Transform Warning Message
DESCRIPTION: This console log line displays the error message encountered when an application or its dependencies are using an outdated JSX transform, advising an update to the modern JSX transform for improved performance.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_0

LANGUAGE: Console
CODE:
```
Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform
```

----------------------------------------

TITLE: Install React 19 and React DOM using npm
DESCRIPTION: Command to install the latest stable version of React and React DOM (version 19.0.0) using npm, ensuring an exact version dependency for consistency.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install --save-exact react@^19.0.0 react-dom@^19.0.0
```

----------------------------------------

TITLE: Install React 19 and React DOM using Yarn
DESCRIPTION: Command to install the latest stable version of React and React DOM (version 19.0.0) using Yarn, ensuring an exact version dependency for consistency.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_2

LANGUAGE: bash
CODE:
```
yarn add --exact react@^19.0.0 react-dom@^19.0.0
```

----------------------------------------

TITLE: Install React 19 TypeScript Types using npm
DESCRIPTION: Command to install the TypeScript type definitions for React and React DOM (version 19.0.0) using npm, which is necessary when developing React 19 applications with TypeScript.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install --save-exact @types/react@^19.0.0 @types/react-dom@^19.0.0
```

----------------------------------------

TITLE: Install React 19 TypeScript Types using Yarn
DESCRIPTION: Command to install the TypeScript type definitions for React and React DOM (version 19.0.0) using Yarn, which is necessary when developing React 19 applications with TypeScript.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn add --exact @types/react@^19.0.0 @types/react-dom@^19.0.0
```

----------------------------------------

TITLE: Run All React 19 Migration Codemods
DESCRIPTION: This command executes a comprehensive codemod recipe provided by `react-codemod` to automate various migration tasks for React 19, including updates to `ReactDOM.render`, string refs, `act` imports, `useFormState`, and `propTypes`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_5

LANGUAGE: bash
CODE:
```
npx codemod@latest react/19/migration-recipe
```

----------------------------------------

TITLE: Custom Error Handling with React 19 createRoot/hydrateRoot
DESCRIPTION: React 19 introduces new `onUncaughtError` and `onCaughtError` options for `createRoot` and `hydrateRoot`. These callbacks allow applications to implement custom error logging and reporting mechanisms, providing more control over how errors are handled compared to previous versions.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_6

LANGUAGE: js
CODE:
```
const root = createRoot(container, {
  onUncaughtError: (error, errorInfo) => {
    // ... log error report
  },
  onCaughtError: (error, errorInfo) => {
    // ... log error report
  }
});
```

----------------------------------------

TITLE: Migrating React Function Components from PropTypes to TypeScript
DESCRIPTION: This example illustrates the transition from using deprecated `propTypes` and `defaultProps` with function components in JavaScript to a modern, type-safe approach using TypeScript interfaces and ES6 default parameters. React 19 silently ignores `propTypes` for performance and encourages type-checking solutions like TypeScript.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_7

LANGUAGE: js
CODE:
```
import PropTypes from 'prop-types';

function Heading({text}) {
  return <h1>{text}</h1>;
}
Heading.propTypes = {
  text: PropTypes.string,
};
Heading.defaultProps = {
  text: 'Hello, world!',
};
```

LANGUAGE: ts
CODE:
```
interface Props {
  text?: string;
}
function Heading({text = 'Hello, world!'}: Props) {
  return <h1>{text}</h1>;
}
```

----------------------------------------

TITLE: Automate PropTypes to TypeScript Migration with Codemod
DESCRIPTION: This `npx` command runs a specific `react-codemod` script designed to automatically convert `propTypes` definitions in your React codebase to TypeScript interfaces, streamlining the migration process for type-checking.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_8

LANGUAGE: bash
CODE:
```
npx codemod@latest react/prop-types-typescript
```

----------------------------------------

TITLE: Migrate Legacy Context to `contextType` API in React Class Components
DESCRIPTION: Legacy Context, using `contextTypes` and `getChildContext`, was deprecated due to subtle bugs and is removed in React 19. This snippet demonstrates how to migrate class components from the old API to the modern `React.createContext` and `static contextType` approach.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_9

LANGUAGE: javascript
CODE:
```
// Before
import PropTypes from 'prop-types';

class Parent extends React.Component {
  static childContextTypes = {
    foo: PropTypes.string.isRequired,
  };

  getChildContext() {
    return { foo: 'bar' };
  }

  render() {
    return <Child />;
  }
}

class Child extends React.Component {
  static contextTypes = {
    foo: PropTypes.string.isRequired,
  };

  render() {
    return <div>{this.context.foo}</div>;
  }
}
```

LANGUAGE: javascript
CODE:
```
// After
const FooContext = React.createContext();

class Parent extends React.Component {
  render() {
    return (
      <FooContext value='bar'>
        <Child />
      </FooContext>
    );
  }
}

class Child extends React.Component {
  static contextType = FooContext;

  render() {
    return <div>{this.context}</div>;
  }
}
```

----------------------------------------

TITLE: Migrate String Refs to Ref Callbacks in React Class Components
DESCRIPTION: String refs were deprecated due to multiple downsides and are removed in React 19 to simplify the API. This snippet illustrates how to update class components that use string refs to the recommended ref callback pattern. A codemod is also available for automated migration.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_10

LANGUAGE: javascript
CODE:
```
// Before
class MyComponent extends React.Component {
  componentDidMount() {
    this.refs.input.focus();
  }

  render() {
    return <input ref='input' />;
  }
}
```

LANGUAGE: javascript
CODE:
```
// After
class MyComponent extends React.Component {
  componentDidMount() {
    this.input.focus();
  }

  render() {
    return <input ref={input => this.input = input} />;
  }
}
```

LANGUAGE: bash
CODE:
```
npx codemod@latest react/19/replace-string-ref
```

----------------------------------------

TITLE: Migrate Module Pattern Factories to Regular Functions in React
DESCRIPTION: Module pattern factories were rarely used and are removed in React 19 to reduce bundle size and improve performance. This snippet shows the migration from the factory pattern to a standard functional component definition.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_11

LANGUAGE: javascript
CODE:
```
// Before
function FactoryComponent() {
  return { render() { return <div />; } }
}
```

LANGUAGE: javascript
CODE:
```
// After
function FactoryComponent() {
  return <div />;
}
```

----------------------------------------

TITLE: Migrate `React.createFactory` to JSX Syntax
DESCRIPTION: `React.createFactory` was common before widespread JSX adoption but is now deprecated and removed in React 19. This snippet demonstrates how to replace `createFactory` calls with equivalent JSX syntax for component creation.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_12

LANGUAGE: javascript
CODE:
```
// Before
import { createFactory } from 'react';

const button = createFactory('button');
```

LANGUAGE: javascript
CODE:
```
// After
const button = <button />;
```

----------------------------------------

TITLE: Migrate `react-test-renderer/shallow` to `react-shallow-renderer`
DESCRIPTION: The `react-test-renderer/shallow` module is being removed in React 19, preferring direct installation of `react-shallow-renderer`. This snippet provides the necessary `npm` command and import statement changes for migration.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_13

LANGUAGE: bash
CODE:
```
npm install react-shallow-renderer --save-dev
```

LANGUAGE: diff
CODE:
```
- import ShallowRenderer from 'react-test-renderer/shallow';
+ import ShallowRenderer from 'react-shallow-renderer';
```

----------------------------------------

TITLE: Migrate `act` import from `react-dom/test-utils` to `react`
DESCRIPTION: This snippet demonstrates the necessary change to import the `act` utility directly from the `react` package instead of `react-dom/test-utils`. This update addresses a deprecation warning in React 19, simplifying the testing setup.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_14

LANGUAGE: diff
CODE:
```
- import {act} from 'react-dom/test-utils'
+ import {act} from 'react';
```

----------------------------------------

TITLE: Automated migration for `act` import
DESCRIPTION: This `npx codemod` command provides an automated way to update `act` import statements. Running this command will automatically refactor your codebase to import `act` from `react`, ensuring compatibility with React 19.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_15

LANGUAGE: bash
CODE:
```
npx codemod@latest react/19/replace-act-import
```

----------------------------------------

TITLE: Migrate `ReactDOM.render` to `ReactDOM.createRoot`
DESCRIPTION: This example illustrates the required migration from the deprecated `ReactDOM.render` method to the modern `ReactDOM.createRoot` API for initializing React applications. `createRoot` offers improved performance and new features like concurrent rendering.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_16

LANGUAGE: js
CODE:
```
// Before
import {render} from 'react-dom';
render(<App />, document.getElementById('root'));

// After
import {createRoot} from 'react-dom/client';
const root = createRoot(document.getElementById('root'));
root.render(<App />);
```

----------------------------------------

TITLE: Migrate `ReactDOM.hydrate` to `ReactDOM.hydrateRoot`
DESCRIPTION: This snippet shows how to transition from the deprecated `ReactDOM.hydrate` method to `ReactDOM.hydrateRoot` for hydrating server-rendered React applications. `hydrateRoot` is the React 19 equivalent, designed for better integration with concurrent features.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_17

LANGUAGE: js
CODE:
```
// Before
import {hydrate} from 'react-dom';
hydrate(<App />, document.getElementById('root'));

// After
import {hydrateRoot} from 'react-dom/client';
hydrateRoot(document.getElementById('root'), <App />);
```

----------------------------------------

TITLE: Migrate `unmountComponentAtNode` to `root.unmount()`
DESCRIPTION: This example demonstrates replacing the deprecated `unmountComponentAtNode` with the `root.unmount()` method. This change is part of the new root API in React 19, providing a more consistent way to unmount components.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_18

LANGUAGE: js
CODE:
```
// Before
unmountComponentAtNode(document.getElementById('root'));

// After
root.unmount();
```

----------------------------------------

TITLE: Automated migration for `ReactDOM.render`, `hydrate`, and `unmountComponentAtNode`
DESCRIPTION: This `npx codemod` command facilitates the automated migration of `ReactDOM.render`, `ReactDOM.hydrate`, and `unmountComponentAtNode` calls. It updates these deprecated APIs to their respective React 19 equivalents (`createRoot`, `hydrateRoot`, `root.unmount`), streamlining the upgrade process.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_19

LANGUAGE: bash
CODE:
```
npx codemod@latest react/19/replace-reactdom-render
```

----------------------------------------

TITLE: Migrate `ReactDOM.findDOMNode` to `useRef` hook
DESCRIPTION: This snippet illustrates how to replace the deprecated `ReactDOM.findDOMNode` with React's `useRef` hook for direct DOM manipulation. Using `useRef` is the recommended and more performant approach, aligning with React's functional component paradigm.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_20

LANGUAGE: js
CODE:
```
// Before
import {findDOMNode} from 'react-dom';

function AutoselectingInput() {
  useEffect(() => {
    const input = findDOMNode(this);
    input.select()
  }, []);

  return <input defaultValue="Hello" />;
}

// After
function AutoselectingInput() {
  const ref = useRef(null);
  useEffect(() => {
    ref.current.select();
  }, []);

  return <input ref={ref} defaultValue="Hello" />
}
```

----------------------------------------

TITLE: Loading React 19 with ESM CDN
DESCRIPTION: Example of loading React 19 and ReactDOMClient using an ESM-based CDN like esm.sh, replacing the deprecated UMD builds.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_21

LANGUAGE: html
CODE:
```
<script type="module">
  import React from "https://esm.sh/react@19/?dev"
  import ReactDOMClient from "https://esm.sh/react-dom@19/client?dev"
  ...
</script>
```

----------------------------------------

TITLE: Migrating React 19 Type Breaking Changes with Codemods
DESCRIPTION: This section introduces `types-react-codemod`, a tool designed to automate the migration of type-related breaking changes in React 19. It provides commands for applying a general preset and a specific codemod for unsound `element.props` access, helping developers update their TypeScript codebases. The tool aims to simplify the transition to the new React types.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_22

LANGUAGE: bash
CODE:
```
npx types-react-codemod@latest preset-19 ./path-to-app
```

LANGUAGE: bash
CODE:
```
npx types-react-codemod@latest react-element-default-any-props ./path-to-your-react-ts-files
```

----------------------------------------

TITLE: Fixing Implicit Returns in React Ref Callbacks
DESCRIPTION: With the introduction of ref cleanup functions in React 19, TypeScript now rejects implicit returns from ref callbacks. This change prevents ambiguity between a ref assignment and a cleanup function. The provided `diff` example demonstrates the necessary modification: explicitly wrapping the assignment in curly braces to avoid an implicit return.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_23

LANGUAGE: diff
CODE:
```
- <div ref={current => (instance = current)} />
+ <div ref={current => {instance = current}} />
```

----------------------------------------

TITLE: Enforcing Argument Requirement for `useRef` and `createContext`
DESCRIPTION: React 19 updates `useRef` to require an argument, simplifying its type signature and aligning its behavior more closely with `createContext`. This change addresses a long-standing complaint regarding TypeScript and React's interaction with `useRef`. The code demonstrates how `useRef()` and `createContext()` without arguments now result in TypeScript errors, while passing `undefined` resolves them.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_24

LANGUAGE: ts
CODE:
```
// @ts-expect-error: Expected 1 argument but saw none
useRef();
// Passes
useRef(undefined);
// @ts-expect-error: Expected 1 argument but saw none
createContext();
// Passes
createContext(undefined);
```

----------------------------------------

TITLE: Understanding `useRef` Mutability and `RefObject` in React 19
DESCRIPTION: This section clarifies the new mutability of refs in React 19, eliminating issues where refs initialized with `null` were immutable. It highlights the deprecation of `MutableRef` in favor of a unified `RefObject` type, which `useRef` will consistently return. The provided TypeScript interface defines the `RefObject` structure, showing its `current` property.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_25

LANGUAGE: ts
CODE:
```
interface RefObject<T> {
  current: T
}

declare function useRef<T>: RefObject<T>
```

----------------------------------------

TITLE: Adjusting to `ReactElement` Props Defaulting to `unknown`
DESCRIPTION: In React 19, the `props` type of `ReactElement` now defaults to `unknown` instead of `any` when no type argument is provided. This change encourages more explicit type handling for element introspection. The examples illustrate how providing a type argument preserves the expected type, while relying on the default now requires handling `unknown` for `props`.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_26

LANGUAGE: ts
CODE:
```
type Example2 = ReactElement<{ id: string }>["props"];
//   ^? { id: string }

type Example = ReactElement["props"];
//   ^? Before, was 'any', now 'unknown'
```

----------------------------------------

TITLE: Migrating JSX Namespace Augmentation in TypeScript
DESCRIPTION: Explains the shift from a global `JSX` namespace to `React.JSX` to prevent global type pollution and conflicts between UI libraries. It demonstrates how to wrap module augmentation for `JSX.IntrinsicElements` within `declare module "react"` or specific JSX runtime modules, as included in the `react-19` codemod preset.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_27

LANGUAGE: diff
CODE:
```
// global.d.ts
+ declare module "react" {
    namespace JSX {
      interface IntrinsicElements {
        "my-element": {
          myElementProps: string;
        };
      }
    }
+ }
```

----------------------------------------

TITLE: Improved useReducer Type Inference and Best Practices
DESCRIPTION: Details the breaking change in `useReducer` typings, which now favors contextual typing over explicit type arguments. It provides examples for the new best practice of not passing type arguments, handling edge cases with explicit state/action types via tuples, and annotating inline or external reducer function parameters for clearer type inference.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/04/25/react-19-upgrade-guide.md#_snippet_28

LANGUAGE: diff
CODE:
```
- useReducer<React.Reducer<State, Action>>(reducer)
+ useReducer(reducer)
```

LANGUAGE: diff
CODE:
```
- useReducer<React.Reducer<State, Action>>(reducer)
+ useReducer<State, [Action]>(reducer)
```

LANGUAGE: diff
CODE:
```
- useReducer<React.Reducer<State, Action>>((state, action) => state)
+ useReducer((state: State, action: Action) => state)
```

LANGUAGE: ts
CODE:
```
const reducer = (state: State, action: Action) => state;
```

----------------------------------------

TITLE: Install React Compiler and ESLint Plugin Beta
DESCRIPTION: Instructions to install the beta versions of `babel-plugin-react-compiler` and `eslint-plugin-react-compiler` for React projects. These tools provide automatic memoization and linting capabilities for React applications.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/10/21/react-compiler-beta-release.md#_snippet_0

LANGUAGE: npm
CODE:
```
npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta
```

LANGUAGE: Yarn
CODE:
```
yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta
```

----------------------------------------

TITLE: Install React Compiler ESLint Plugin Beta Only
DESCRIPTION: Instructions to install only the beta version of `eslint-plugin-react-compiler`. This plugin helps identify and correct Rules of React violations independently of the compiler, making future adoption easier.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/10/21/react-compiler-beta-release.md#_snippet_1

LANGUAGE: npm
CODE:
```
npm install -D eslint-plugin-react-compiler@beta
```

LANGUAGE: Yarn
CODE:
```
yarn add -D eslint-plugin-react-compiler@beta
```

----------------------------------------

TITLE: Managing Pending and Error States Manually in React
DESCRIPTION: This example demonstrates the traditional approach to handling pending and error states in a React component before the introduction of React 19's Actions. It shows how `useState` is used to manually manage `isPending` and `error` flags during an asynchronous data mutation, requiring explicit state updates before and after the API call.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Before Actions
function UpdateName({}) {
  const [name, setName] = useState("");
  const [error, setError] = useState(null);
  const [isPending, setIsPending] = useState(false);

  const handleSubmit = async () => {
    setIsPending(true);
    const error = await updateName(name);
    setIsPending(false);
    if (error) {
      setError(error);
      return;
    } 
    redirect("/path");
  };

  return (
    <div>
      <input value={name} onChange={(event) => setName(event.target.value)} />
      <button onClick={handleSubmit} disabled={isPending}>
        Update
      </button>
      {error && <p>{error}</p>}
    </div>
  );
}
```

----------------------------------------

TITLE: Simplifying Pending State with React 19 Actions and useTransition
DESCRIPTION: This example illustrates how React 19's new Actions feature, combined with `useTransition`, simplifies the management of pending states for asynchronous operations. By wrapping the async function in `startTransition`, React automatically handles the `isPending` state, providing a more streamlined and declarative way to manage UI responsiveness during data mutations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Using pending state from Actions
function UpdateName({}) {
  const [name, setName] = useState("");
  const [error, setError] = useState(null);
  const [isPending, startTransition] = useTransition();

  const handleSubmit = () => {
    startTransition(async () => {
      const error = await updateName(name);
      if (error) {
        setError(error);
        return;
      } 
      redirect("/path");
    })
  };

  return (
    <div>
      <input value={name} onChange={(event) => setName(event.target.value)} />
      <button onClick={handleSubmit} disabled={isPending}>
        Update
      </button>
      {error && <p>{error}</p>}
    </div>
  );
}
```

----------------------------------------

TITLE: Simplifying React Form Submission with `useActionState`
DESCRIPTION: This example demonstrates how to streamline form submissions in React 19 by combining `<form>` Actions with the `useActionState` hook. It illustrates managing pending states, handling errors, and automatically resetting forms after successful data submission, providing a concise pattern for asynchronous form operations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Using <form> Actions and useActionState
function ChangeName({ name, setName }) {
  const [error, submitAction, isPending] = useActionState(
    async (previousState, formData) => {
      const error = await updateName(formData.get("name"));
      if (error) {
        return error;
      }
      redirect("/path");
      return null;
    },
    null,
  );

  return (
    <form action={submitAction}>
      <input type="text" name="name" />
      <button type="submit" disabled={isPending}>Update</button>
      {error && <p>{error}</p>}
    </form>
  );
}
```

----------------------------------------

TITLE: Basic Usage of React's `useActionState` Hook
DESCRIPTION: This snippet showcases the fundamental usage of the `useActionState` hook, designed to simplify common patterns for React Actions. It accepts an asynchronous function (the 'Action') and returns the action's last result, a wrapped action to invoke, and a boolean indicating its pending state, facilitating cleaner asynchronous logic.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const [error, submitAction, isPending] = useActionState(
  async (previousState, newName) => {
    const error = await updateName(newName);
    if (error) {
      // You can return any result of the action.
      // Here, we return only the error.
      return error;
    }

    // handle success
    return null;
  },
  null,
);
```

----------------------------------------

TITLE: Integrating React Actions with HTML `<form>` Elements
DESCRIPTION: This example demonstrates how React 19 integrates Actions directly with standard HTML `<form>` elements by allowing functions to be passed to the `action` prop. This enables automatic form submission and resetting for uncontrolled components, significantly simplifying form handling within React applications.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_4

LANGUAGE: javascript
CODE:
```
<form action={actionFunction}>
```

----------------------------------------

TITLE: Accessing Parent Form Status with React `useFormStatus`
DESCRIPTION: This snippet illustrates the `useFormStatus` hook, which provides components with direct access to the status of their parent `<form>` without requiring prop drilling. It enables UI elements, such as submission buttons, to dynamically update their state (e.g., `disabled` status) based on the form's pending state during submission.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import {useFormStatus} from 'react-dom';

function DesignButton() {
  const {pending} = useFormStatus();
  return <button type="submit" disabled={pending} />
}
```

----------------------------------------

TITLE: React useOptimistic Hook for Optimistic UI Updates
DESCRIPTION: The `useOptimistic` hook allows for immediate UI updates (optimistic rendering) while an asynchronous data mutation request is in progress. React automatically reverts to the original state if the update fails or completes, providing a smoother user experience during network operations.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function ChangeName({currentName, onUpdateName}) {
  const [optimisticName, setOptimisticName] = useOptimistic(currentName);

  const submitAction = async formData => {
    const newName = formData.get("name");
    setOptimisticName(newName);
    const updatedName = await updateName(newName);
    onUpdateName(updatedName);
  };

  return (
    <form action={submitAction}>
      <p>Your name is: {optimisticName}</p>
      <p>
        <label>Change Name:</label>
        <input
          type="text"
          name="name"
          disabled={currentName !== optimisticName}
        />
      </p>
    </form>
  );
}
```

----------------------------------------

TITLE: React use API for Reading Promises in Render
DESCRIPTION: The `use` API in React 19 enables components to read resources like promises directly within the render function. When `use` encounters a promise, React will suspend rendering until the promise resolves, making it compatible with Suspense boundaries for loading states.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import {use} from 'react';

function Comments({commentsPromise}) {
  // `use` will suspend until the promise resolves.
  const comments = use(commentsPromise);
  return comments.map(comment => <p key={comment.id}>{comment}</p>);
}

function Page({commentsPromise}) {
  // When `use` suspends in Comments,
  // this Suspense boundary will be shown.
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Comments commentsPromise={commentsPromise} />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: React use API for Conditional Context Reading
DESCRIPTION: Unlike `useContext`, the `use` API allows for conditional reading of Context within a component's render function. This means `use` can be called after early returns or inside conditional blocks, providing more flexibility in how context is consumed.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import {use} from 'react';
import ThemeContext from './ThemeContext'

function Heading({children}) {
  if (children == null) {
    return null;
  }
  
  // This would not work with useContext
  // because of the early return.
  const theme = use(ThemeContext);
  return (
    <h1 style={{color: theme.color}}>
      {children}
    </h1>
  );
}
```

----------------------------------------

TITLE: React DOM Static prerender API for Static HTML Generation
DESCRIPTION: The `prerender` API from `react-dom/static` is designed for static site generation, improving upon `renderToString` by waiting for all data to load before returning the static HTML stream. It integrates with streaming environments like Node.js and Web Streams for efficient server-side rendering of static content.
SOURCE: https://github.com/reactjs/react.dev/blob/main/src/content/blog/2024/12/05/react-19.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { prerender } from 'react-dom/static';

async function handler(request) {
  const {prelude} = await prerender(<App />, {
    bootstrapScripts: ['/main.js']
  });
  return new Response(prelude, {
    headers: { 'content-type': 'text/html' },
  });
}
```