TITLE: Next.js App Directory: Managing Metadata with `metadata` Export (After Migration)
DESCRIPTION: Shows the new method for defining page metadata in the Next.js `app` directory using a `metadata` export, replacing the `next/head` component for improved SEO capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

----------------------------------------

TITLE: Set Absolute Page Title in Next.js Metadata
DESCRIPTION: Illustrates how to define an absolute title for a specific page in Next.js `app/about/page.tsx` or `app/about/page.js` using `metadata.title.absolute`. This setting overrides any `title.template` inherited from parent segments, ensuring the exact title is used.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    absolute: 'About',
  },
}

// Output: <title>About</title>
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: {
    absolute: 'About',
  },
}

// Output: <title>About</title>
```

----------------------------------------

TITLE: Create Next.js App Router home page
DESCRIPTION: Set up the initial home page component for the Next.js App Router, which will be rendered at the root path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Implement Page-Level Streaming with Next.js `loading.js`
DESCRIPTION: The `loading.js` file in Next.js provides an automatic loading UI for an entire page while data is being fetched. Placed in the same folder as the page, it automatically wraps the `page.js` file and its children in a `<Suspense>` boundary, improving perceived performance during navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: Redirect User After Data Mutation in Next.js Server Action
DESCRIPTION: This snippet demonstrates how to use the `redirect` function within a Next.js Server Action to navigate the user to a new URL after a successful data mutation, such as creating a post. It also shows how to use `revalidatePath` to update the cache for related data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

----------------------------------------

TITLE: Set Response Headers in Next.js API Routes
DESCRIPTION: This snippet demonstrates how to set custom HTTP headers in a Next.js API route by returning a new `Response` object with the desired headers. This is the method for sending outgoing headers to the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request: Request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

LANGUAGE: javascript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

----------------------------------------

TITLE: Implement Wildcard Path Matching for Headers in Next.js
DESCRIPTION: Demonstrates using `*` after a path parameter (e.g., `:slug*`) to match nested paths. This allows applying headers to a broad range of sub-routes, with parameters available in header keys and values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_4

LANGUAGE: js
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:slug*',
        headers: [
          {
            key: 'x-slug',
            value: ':slug*', // Matched parameters can be used in the value
          },
          {
            key: 'x-slug-:slug*', // Matched parameters can be used in the key
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Delete a cookie from NextRequest
DESCRIPTION: Deletes a cookie by its name from the request. Returns `true` if the cookie was found and deleted, `false` otherwise.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-request.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
request.cookies.delete('experiments')
```

----------------------------------------

TITLE: Triggering Redirect via Server Action from Client Component
DESCRIPTION: This example shows a Next.js Client Component that uses an HTML form to trigger a Server Action. The Server Action (defined separately) will then perform the actual redirect. This pattern is useful when a redirect needs to happen as a result of user interaction, like a form submission, where server-side logic is required.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/redirect.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Configure Authentication Context Provider in Next.js Root Layout
DESCRIPTION: This snippet demonstrates how to wrap a Next.js `RootLayout` with a `ContextProvider` from an authentication library. While effective for Client Components, it's important to note that child Server Components rendered on the server will not have access to the session data provided by this context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_32

LANGUAGE: typescript
CODE:
```
import { ContextProvider } from 'auth-lib'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implement Global Error Handling with Next.js global-error.js
DESCRIPTION: The `global-error.js` file in Next.js allows you to handle errors at the root layout or template level. It must be located in the root app directory and define its own `<html>` and `<body>` tags, replacing the root layout when active. Error boundaries must be Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/error.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({ error, reset }) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Access Environment Variables in Next.js App Router Route Handler
DESCRIPTION: Demonstrates how to access environment variables such as `DB_HOST`, `DB_USER`, and `DB_PASS` within a Route Handler in the Next.js App Router, enabling server-side logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_2

LANGUAGE: js
CODE:
```
export async function GET() {
  const db = await myDB.connect({
    host: process.env.DB_HOST,
    username: process.env.DB_USER,
    password: process.env.DB_PASS,
  })
  // ...
}
```

----------------------------------------

TITLE: Disable Static Image Imports in Next.js
DESCRIPTION: This option disables the default behavior of importing static image files (e.g., `import icon from './icon.png'`) for use with the `src` prop. It can be enabled to prevent conflicts with other plugins that expect different import behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_33

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    disableStaticImages: true,
  },
}
```

----------------------------------------

TITLE: Configure Next.js basePath for Sub-Path Deployment
DESCRIPTION: Demonstrates how to set the `basePath` option in `next.config.js` to deploy a Next.js application under a specific sub-path, such as `/docs`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/basePath.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  basePath: '/docs'
}
```

----------------------------------------

TITLE: APIDOC: Middleware Matcher Property
DESCRIPTION: Details on the `matcher` option within the middleware `config` object. It allows targeting specific paths for middleware execution using strings, arrays, regular expressions, and objects with detailed matching conditions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Matcher property:
  - Type: string | string[] | object[]
  - Purpose: Target specific paths for Middleware execution.
  - Simple usage:
    - Single path: '/about'
    - Multiple paths: ['/about', '/contact']
  - Complex usage (array of objects):
    - source: string (path or pattern)
    - regexp (optional): string (regular expression for fine-tuning)
    - locale (optional): boolean (false to ignore locale-based routing)
    - has (optional): array of objects (conditions based on presence of headers, query params, cookies)
      - type: 'header' | 'query' | 'cookie'
      - key: string
      - value: string
    - missing (optional): array of objects (conditions based on absence of headers, query params, cookies)
      - type: 'header' | 'query' | 'cookie'
      - key: string
      - value: string
  - Configured matchers rules:
    1. MUST start with '/'
    2. Can include named parameters: '/about/:path'
    3. Can have modifiers on named parameters: '/about/:path*', '/about/:path?', '/about/:path+'
    4. Can use regular expression enclosed in parenthesis: '/about/(.*)'
  - Constraints:
    - Values must be constants for static analysis at build-time.
    - '/public' is considered '/public/index' for backward compatibility.
```

----------------------------------------

TITLE: Next.js Middleware Execution Order
DESCRIPTION: This section describes the specific sequence in which Next.js processes requests, including the invocation of Middleware. It lists the ordered steps, from `next.config.js` headers and redirects to filesystem routes and dynamic routes, emphasizing the importance of matchers for precise targeting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Middleware execution order:
1. headers from next.config.js
2. redirects from next.config.js
3. Middleware (rewrites, redirects, etc.)
4. beforeFiles (rewrites) from next.config.js
5. Filesystem routes (public/, _next/static/, pages/, app/, etc.)
6. afterFiles (rewrites) from next.config.js
7. Dynamic Routes (/blog/[slug])
8. fallback (rewrites) from next.config.js
```

----------------------------------------

TITLE: Configure Server Actions Allowed Origins in Next.js
DESCRIPTION: Configures a list of extra safe origin domains from which Server Actions can be invoked. This prevents CSRF attacks by ensuring the request origin matches the host domain. If not set, only the same origin is allowed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/serverActions.mdx#_snippet_0

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */

module.exports = {
  experimental: {
    serverActions: {
      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],
    },
  },
}
```

----------------------------------------

TITLE: Next.js Metadata Object: Using Title Template for Child Routes
DESCRIPTION: Explains how to use `title.template` to add a prefix or suffix to titles defined in child route segments. A `title.default` is required when using a template. The template applies to child segments, not the segment where it's defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme' // a default is required when creating a template
  }
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme' // a default is required when creating a template
  }
}
```

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'About'
}

// Output: <title>About | Acme</title>
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'About'
}

// Output: <title>About | Acme</title>
```

----------------------------------------

TITLE: Invalidate Next.js Cache Tag with revalidateTag
DESCRIPTION: This server action demonstrates how to invalidate a specific cache tag ('bookings-data') using `revalidateTag` from `next/cache` after updating booking data. This ensures fresh data is served on subsequent requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cacheTag.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function updateBookings() {
  await updateBookingData()
  revalidateTag('bookings-data')
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function updateBookings() {
  await updateBookingData()
  revalidateTag('bookings-data')
}
```

----------------------------------------

TITLE: Integrate Shared Open Graph Image in About Page Metadata
DESCRIPTION: Similar to the home page example, this snippet demonstrates how the `about` page (`app/about/page.js`) can also import and reuse the `openGraphImage` from `app/shared-metadata.js`. This ensures consistent Open Graph image usage across different pages while maintaining page-specific titles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_55

LANGUAGE: jsx
CODE:
```
import { openGraphImage } from '../shared-metadata'

export const metadata = {
  openGraph: {
    ...openGraphImage,
    title: 'About',
  },
}
```

----------------------------------------

TITLE: Add ESLint Lint Script to package.json
DESCRIPTION: To manually add ESLint to an existing Next.js project, include the `next lint` command as a script named `lint` in your `package.json` file. This allows you to run ESLint checks using `npm run lint`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "lint": "next lint"
  }
}
```

----------------------------------------

TITLE: Update Next.js, React, and React DOM Packages
DESCRIPTION: This command updates the core Next.js, React, and React DOM packages to their latest stable versions using npm, which is the first step in upgrading your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@latest react@latest react-dom@latest
```

----------------------------------------

TITLE: HTML Login Form for User Authentication
DESCRIPTION: A basic HTML form for user login, capturing email and password. On submission, it triggers a POST request to the `/api/auth/login` API route, handled by a `handleSubmit` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_9

LANGUAGE: HTML
CODE:
```
    <form onSubmit={handleSubmit}>
      <input type="email" name="email" placeholder="Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
```

----------------------------------------

TITLE: Handling Next.js Router Events with usePathname and useSearchParams
DESCRIPTION: This example demonstrates how to listen for page changes in Next.js by combining `useEffect`, `usePathname`, and `useSearchParams` hooks within a Client Component. The `NavigationEvents` component logs the current URL on route changes, and the second snippet shows how to integrate this component into a Next.js layout, wrapped in a `Suspense` boundary for proper client-side rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'
import { usePathname, useSearchParams } from 'next/navigation'

export function NavigationEvents() {
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const url = `${pathname}?${searchParams}`
    console.log(url)
    // You can now use the current URL
    // ...
  }, [pathname, searchParams])

  return '...'
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { NavigationEvents } from './components/navigation-events'

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}

        <Suspense fallback={null}>
          <NavigationEvents />
        </Suspense>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configure Next.js with next.config.js (CommonJS)
DESCRIPTION: Demonstrates the basic structure of a `next.config.js` file using CommonJS module export, which is the default configuration method for Next.js applications. This file is used by the Next.js server and build phases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/index.mdx#_snippet_0

LANGUAGE: js
CODE:
```
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Configure X-Frame-Options Header in Next.js
DESCRIPTION: This header indicates whether the site should be allowed to be displayed within an iframe, which can prevent clickjacking attacks. Note that this header has been superseded by CSP's `frame-ancestors` option for modern browsers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_15

LANGUAGE: js
CODE:
```
{
  key: 'X-Frame-Options',
  value: 'SAMEORIGIN'
}
```

----------------------------------------

TITLE: Common HTML `<iframe>` Tag Attributes Reference
DESCRIPTION: This section provides a reference for common attributes used with the HTML `<iframe>` tag, including their purpose and example values. It helps in understanding how to configure iframes for embedding external content and ensures proper accessibility and loading behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
iframe_attributes:
  - attribute: src
    description: The URL of the page to embed.
    example: <iframe src="https://example.com" />
  - attribute: width
    description: Sets the width of the iframe.
    example: <iframe width="500" />
  - attribute: height
    description: Sets the height of the iframe.
    example: <iframe height="300" />
  - attribute: allowFullScreen
    description: Allows the iframe content to be displayed in full-screen mode.
    example: <iframe allowFullScreen />
  - attribute: sandbox
    description: Enables an extra set of restrictions on the content within the iframe.
    example: <iframe sandbox />
  - attribute: loading
    description: Optimize loading behavior (e.g., lazy loading).
    example: <iframe loading="lazy" />
  - attribute: title
    description: Provides a title for the iframe to support accessibility.
    example: <iframe title="Description" />
```

----------------------------------------

TITLE: Migrate `experimental.bundlePagesExternals` to `bundlePagesRouterDependencies` in Next.js Config
DESCRIPTION: The `experimental.bundlePagesExternals` option is now stable and renamed to `bundlePagesRouterDependencies`. This snippet demonstrates how to update your `next.config.js` file to use the new property name.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_22

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Before
  experimental: {
    bundlePagesExternals: true,
  },

  // After
  bundlePagesRouterDependencies: true,
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Apply Conditional Rewrites in Next.js Middleware
DESCRIPTION: This middleware demonstrates how to use conditional statements to rewrite URLs based on the incoming request's pathname. It shows examples of rewriting '/about' to '/about-2' and '/dashboard' to '/dashboard/user', providing flexible routing capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_16

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    return NextResponse.rewrite(new URL('/about-2', request.url))
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.rewrite(new URL('/dashboard/user', request.url))
  }
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    return NextResponse.rewrite(new URL('/about-2', request.url))
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.rewrite(new URL('/dashboard/user', request.url))
  }
}
```

----------------------------------------

TITLE: Optimize Tailwind CSS Content Scanning
DESCRIPTION: Demonstrates a more specific and optimized configuration for the `content` array in `tailwind.config.js`. By targeting only the necessary source folders, this approach prevents Tailwind CSS from scanning irrelevant files, thereby improving build performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/local-development.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
module.exports = {
  content: [
    // Better - only scans the 'src' folder
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}',
  ],
}
```

----------------------------------------

TITLE: NextResponse.rewrite() Method API
DESCRIPTION: Static method to create a `NextResponse` instance that internally rewrites (proxies) the request to a different URL while maintaining the original URL in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_15

LANGUAGE: APIDOC
CODE:
```
`static rewrite(url: string | URL)`
  Parameters:
    `url`: The internal URL to rewrite the request to.
  Returns: `NextResponse`
  Description: Produce a response that rewrites (proxies) the given URL while preserving the original URL.
```

----------------------------------------

TITLE: Install Next.js Bundle Analyzer
DESCRIPTION: Instructions to install the `@next/bundle-analyzer` plugin using npm, yarn, or pnpm. This plugin helps visualize and manage the size of application bundles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @next/bundle-analyzer
```

LANGUAGE: bash
CODE:
```
yarn add @next/bundle-analyzer
```

LANGUAGE: bash
CODE:
```
pnpm add @next/bundle-analyzer
```

----------------------------------------

TITLE: Handle User Not Found with Next.js notFound() in JSX
DESCRIPTION: This JSX code snippet demonstrates how to use the `notFound()` function within a Next.js `page.js` file. It fetches user data and, if the user is not found, invokes `notFound()` to render the designated not-found UI and terminate further rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/not-found.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { notFound } from 'next/navigation'

async function fetchUser(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const user = await fetchUser(id)

  if (!user) {
    notFound()
  }

  // ...
```

----------------------------------------

TITLE: Redirecting Users After Server Action Completion in Next.js
DESCRIPTION: This snippet demonstrates how to redirect a user to a different page after a Server Function completes an update operation. It utilizes the `redirect` function from `next/navigation` to programmatically navigate the user to a specified path, such as '/posts', ensuring a smooth post-action user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Update data
  // ...

  redirect('/posts')
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Update data
  // ...

  redirect('/posts')
}
```

----------------------------------------

TITLE: Access Dynamic Route Parameters in Next.js Icon Function
DESCRIPTION: This snippet illustrates how to access dynamic route parameters within the default export function of an `icon` or `apple-icon` route. The `params` object provides route segment values from the URL, allowing for dynamic icon generation based on the current path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/app-icons.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function Icon({ params }: { params: { slug: string } }) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export default function Icon({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Apply Tailwind CSS Utility Classes in Next.js Components
DESCRIPTION: This snippet demonstrates how to apply Tailwind CSS utility classes directly within a Next.js React component. It shows a basic page component that renders an h1 element styled with Tailwind's text size, font weight, and underline utilities. This approach requires Tailwind CSS to be installed and configured globally in the Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Basic Next.js Link Component Usage
DESCRIPTION: Demonstrates how to import and use the `next/link` component for simple client-side navigation to a specified path. Examples are provided for both App Router (`app/page.tsx`, `app/page.js`) and Pages Router (`pages/index.tsx`, `pages/index.js`) environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Get Image Props for Custom Image Components in Next.js
DESCRIPTION: The `getImageProps` function from `next/image` allows developers to retrieve the properties that would normally be passed to an `<img>` element. These props can then be applied to a custom component, style, or canvas, offering more flexibility. This approach can improve performance by avoiding React `useState()` calls, but it is incompatible with the `placeholder` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_38

LANGUAGE: jsx
CODE:
```
import { getImageProps } from 'next/image'

const props = getImageProps({
  src: 'https://example.com/image.jpg',
  alt: 'A scenic mountain view',
  width: 1200,
  height: 800,
})

function ImageWithCaption() {
  return (
    <figure>
      <img {...props} />
      <figcaption>A scenic mountain view</figcaption>
    </figure>
  )
}
```

----------------------------------------

TITLE: Create a Basic Next.js API Route with JSON Response
DESCRIPTION: This snippet demonstrates how to create a simple API route in Next.js that returns a JSON response with a 200 status code. Files in `pages/api` are treated as API endpoints, allowing server-side logic without increasing client-side bundle size.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Next.js Rewrite with Used Parameter (No Query Auto-Pass)
DESCRIPTION: Illustrates a Next.js rewrite where a parameter (`:path*`) from the `source` is explicitly used in the `destination`. When a parameter is used in the destination, Next.js does not automatically pass other parameters as query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/docs/:path*',
        destination: '/:path*', // The :path parameter is used here so will not be automatically passed in the query
      },
    ]
  },
}
```

----------------------------------------

TITLE: Parallel Data Fetching in Next.js Pages using Promise.all
DESCRIPTION: This snippet shows how to initiate multiple data fetching requests concurrently in Next.js by defining them outside the component and using `Promise.all`. This approach allows `getArtist` and `getAlbums` to fetch data simultaneously, significantly improving load times compared to sequential execution. It includes both TypeScript (TSX) and JavaScript (JSX) versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import Albums from './albums'

async function getArtist(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}`)
  return res.json()
}

async function getAlbums(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`)
  return res.json()
}

export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>
}) {
  const { username } = await params
  const artistData = getArtist(username)
  const albumsData = getAlbums(username)

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData])

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Albums from './albums'

async function getArtist(username) {
  const res = await fetch(`https://api.example.com/artist/${username}`)
  return res.json()
}

async function getAlbums(username) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`)
  return res.json()
}

export default async function Page({ params }) {
  const { username } = await params
  const artistData = getArtist(username)
  const albumsData = getAlbums(username)

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData])

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  )
}
```

----------------------------------------

TITLE: Configure Metadata in Next.js Layouts
DESCRIPTION: This snippet demonstrates how to configure page metadata, such as the title, using Next.js's `metadata` object in root layouts. It highlights the use of the `Metadata` type for TypeScript and the general approach for JavaScript, emphasizing that direct `<head>` tag manipulation should be avoided in favor of Next.js's Metadata APIs for advanced features like streaming and de-duplication.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Next.js',
}

export default function Layout({ children }: { children: React.ReactNode }) {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Next.js',
}

export default function Layout({ children }) {
  return '...'
}
```

----------------------------------------

TITLE: Invalidating Cached Data with `revalidateTag` in Next.js Server Actions
DESCRIPTION: This snippet demonstrates how to use `revalidateTag` within a Next.js Server Action or Route Handler to invalidate cached data. Calling `revalidateTag('posts')` will clear all cached data associated with the 'posts' tag, ensuring fresh data is fetched on subsequent requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  // Invalidate all data tagged with 'posts' in the cache
  revalidateTag('posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  // Invalidate all data tagged with 'posts' in the cache
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Create Client-Side React Context Provider (ThemeProvider)
DESCRIPTION: This code defines a `ThemeProvider` as a Client Component, which is necessary for using React Context in Next.js applications since Server Components do not directly support it. It creates a context and provides a value, allowing global state like a theme to be shared with descendant Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({ children }) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

----------------------------------------

TITLE: Display Content Using Dynamic Route Parameters in Next.js Page
DESCRIPTION: This example demonstrates how to use the `params` prop, which contains dynamic route segments, to display or fetch specific content for the page. The `slug` parameter is extracted and used directly in the page's UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

----------------------------------------

TITLE: Configure Google Font with Specific Weight in Next.js
DESCRIPTION: When not using variable fonts, you need to specify a weight for Google Fonts. This example demonstrates how to import the Roboto font and set its weight to '400' for use in the Root Layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/13-fonts.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Define Multiline Environment Variables in .env
DESCRIPTION: This snippet illustrates how to define multiline environment variables in a `.env` file, either by using actual line breaks or by escaping newlines with `\n` within double quotes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_3

LANGUAGE: txt
CODE:
```
# .env

# you can write with line breaks
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----
...
Kh9NV...
...
-----END DSA PRIVATE KEY-----"

# or with `\n` inside double quotes
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY----- \nKh9NV...\n-----END DSA PRIVATE KEY-----\n"
```

----------------------------------------

TITLE: Next.js App Router Data Fetching with `fetch()` and Caching Strategies
DESCRIPTION: Demonstrates how to fetch data in the Next.js App Router using `fetch()` with different caching behaviors: `force-cache` for static data (like `getStaticProps`), `no-store` for dynamic data (like `getServerSideProps`), and `next: { revalidate: N }` for time-based revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

----------------------------------------

TITLE: Generated HTML for Open Graph Article Metadata
DESCRIPTION: This snippet displays the HTML `<head>` tags generated for an Open Graph 'article' type, including `article:published_time` and `article:author` properties, as rendered by Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_15

LANGUAGE: html
CODE:
```
<meta property="og:title" content="Next.js" />
<meta property="og:description" content="The React Framework for the Web" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2023-01-01T00:00:00.000Z" />
<meta property="article:author" content="Seb" />
<meta property="article:author" content="Josh" />
```

----------------------------------------

TITLE: Configure Custom Metadata with Array Values using 'other' Option
DESCRIPTION: Illustrates how to generate multiple meta tags with the same key by providing an array of values to the `other` property in Next.js's `metadata` object, along with the resulting HTML.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_36

LANGUAGE: jsx
CODE:
```
export const metadata = {
  other: {
    custom: ['meta1', 'meta2'],
  },
}
```

LANGUAGE: html
CODE:
```
<meta name="custom" content="meta1" /> <meta name="custom" content="meta2" />
```

----------------------------------------

TITLE: Define Base Next.js Metadata in Layout
DESCRIPTION: This snippet defines the foundational metadata for a Next.js application within `app/layout.js`. This configuration serves as the default, providing global `title` and `openGraph` properties that can be subsequently overwritten or inherited by child pages and routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_51

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Acme',
  openGraph: {
    title: 'Acme',
    description: 'Acme is a...', 
  },
}
```

----------------------------------------

TITLE: Integrate Shared Open Graph Image in Home Page Metadata
DESCRIPTION: This snippet shows how to import and integrate the `openGraphImage` from `app/shared-metadata.js` into the home page's (`app/page.js`) metadata. By using the spread operator (`...openGraphImage`), the shared image properties are included while allowing the page to define its unique `title`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_54

LANGUAGE: jsx
CODE:
```
import { openGraphImage } from './shared-metadata'

export const metadata = {
  openGraph: {
    ...openGraphImage,
    title: 'Home',
  },
}
```

----------------------------------------

TITLE: Access Session Data in Next.js Client Component
DESCRIPTION: This example illustrates how to consume session data within a Client Component using a hook like `useSession` from an authentication library. It shows a common pattern for fetching user-specific data client-side after authentication, such as a user profile.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_33

LANGUAGE: typescript
CODE:
```
'use client';

import { useSession } from "auth-lib";

export default function Profile() {
  const { userId } = useSession();
  const { data } = useSWR(`/api/user/${userId}`, fetcher)

  return (
    // ...
  );
}
```

LANGUAGE: javascript
CODE:
```
'use client';

import { useSession } from "auth-lib";

export default function Profile() {
  const { userId } = useSession();
  const { data } = useSWR(`/api/user/${userId}`, fetcher)

  return (
    // ...
  );
}
```

----------------------------------------

TITLE: Define Next.js Global Layout with Custom App
DESCRIPTION: This snippet shows how to create a custom `_app` file in Next.js to define a global layout for all pages. It imports `AppProps` for TypeScript type safety and renders the current `Component` with its `pageProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import type { AppProps } from 'next/app'

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}
```

LANGUAGE: jsx
CODE:
```
export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />
}
```

----------------------------------------

TITLE: Disable scroll to top on route navigation in Next.js
DESCRIPTION: This code snippet demonstrates how to prevent Next.js from scrolling to the top of the page when navigating to a new route. It uses the `useRouter` hook from `next/navigation` and passes `{ scroll: false }` as an option to `router.push()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button
      type="button"
      onClick={() => router.push('/dashboard', { scroll: false })}
    >
      Dashboard
    </button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button
      type="button"
      onClick={() => router.push('/dashboard', { scroll: false })}
    >
      Dashboard
    </button>
  )
}
```

----------------------------------------

TITLE: Configure Next.js assetPrefix for CDN
DESCRIPTION: This JavaScript snippet demonstrates how to set the `assetPrefix` option in `next.config.mjs`. It conditionally applies a CDN URL (e.g., 'https://cdn.mydomain.com') for production builds while leaving it undefined for development, ensuring static assets loaded from the `/_next/` path are served from the specified CDN.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/assetPrefix.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// @ts-check
import { PHASE_DEVELOPMENT_SERVER } from 'next/constants'

export default (phase) => {
  const isDev = phase === PHASE_DEVELOPMENT_SERVER
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    assetPrefix: isDev ? undefined : 'https://cdn.mydomain.com',
  }
  return nextConfig
}
```

----------------------------------------

TITLE: Define Next.js Page Component with Nav and Form
DESCRIPTION: This snippet demonstrates how to create a Next.js page component, importing and rendering custom `Nav` and `Form` components to structure the main content of a page, such as a dashboard. It shows a common pattern for composing UI from smaller, reusable components within a Next.js page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_32

LANGUAGE: tsx
CODE:
```
import Nav from './components/nav'
import Form from './components/form'

export default function Page() {
  return (
    <div>
      <Nav />
      <main>
        <h1>Welcome to the Dashboard</h1>
        <Form />
      </main>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Nav from './components/nav'
import Form from './components/form'

export default function Page() {
  return (
    <div>
      <Nav />
      <main>
        <h1>Welcome to the Dashboard</h1>
        <Form />
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Programmatically Submit Form on Keyboard Shortcut (Next.js)
DESCRIPTION: This snippet demonstrates how to programmatically submit a form in a Next.js application using the `requestSubmit()` method. It listens for the `⌘` + `Enter` (or `Ctrl` + `Enter`) keyboard shortcut on a textarea to trigger the submission of the nearest form ancestor, which then invokes a Server Function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

export function Entry() {
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (
      (e.ctrlKey || e.metaKey) &&
      (e.key === 'Enter' || e.key === 'NumpadEnter')
    ) {
      e.preventDefault()
      e.currentTarget.form?.requestSubmit()
    }
  }

  return (
    <div>
      <textarea name="entry" rows={20} required onKeyDown={handleKeyDown} />
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export function Entry() {
  const handleKeyDown = (e) => {
    if (
      (e.ctrlKey || e.metaKey) &&
      (e.key === 'Enter' || e.key === 'NumpadEnter')
    ) {
      e.preventDefault()
      e.currentTarget.form?.requestSubmit()
    }
  }

  return (
    <div>
      <textarea name="entry" rows={20} required onKeyDown={handleKeyDown} />
    </div>
  )
}
```

----------------------------------------

TITLE: Export Sass Variable from CSS Module
DESCRIPTION: Defines a Sass variable in a `.module.scss` file and exports it using `:export` for use in JavaScript/React components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/sass.mdx#_snippet_3

LANGUAGE: scss
CODE:
```
$primary-color: #64ff00;

:export {
  primaryColor: $primary-color;
}
```

----------------------------------------

TITLE: Next.js `generateStaticParams` for On-Demand Static Generation
DESCRIPTION: To defer all static generation of dynamic routes to request time, `generateStaticParams` can return an empty array. This ensures no paths are pre-rendered at build time, making them dynamically generated upon their first visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_18

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  return []
}
```

----------------------------------------

TITLE: Client-Side Login Form Component in Next.js
DESCRIPTION: This React component, `LoginPage`, provides a user interface for logging in. It captures email and password inputs, prevents default form submission, and sends the credentials as JSON to a `/api/auth/login` endpoint. Upon a successful response, the user is redirected to the `/profile` page using Next.js's `useRouter`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input type="email" name="email" placeholder="Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
```

----------------------------------------

TITLE: Next.js `generateStaticParams` for Full Build-Time Static Generation
DESCRIPTION: This example demonstrates how to use `generateStaticParams` to pre-render all possible dynamic paths for a route segment at build time. It fetches a full list of posts and returns them, ensuring all pages are statically generated upfront.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Display User Data in Next.js Dashboard Page
DESCRIPTION: Illustrates fetching and displaying user data directly within a Next.js page component. Similar to layouts, it uses the `getUser` function to fetch data, demonstrating the flexibility of data fetching capabilities across different route types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'

export default async function Page() {
  const user = await getUser('1')

  return (
    <div>
      <h1>Welcome {user.name}</h1>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'

export default async function Page() {
  const user = await getUser('1')

  return (
    <div>
      <h1>Welcome {user.name}</h1>
    </div>
  )
}
```

----------------------------------------

TITLE: Read HTTP Cookies in Next.js Server Component
DESCRIPTION: This code snippet demonstrates how to import and use the `cookies` function from `next/headers` to read an incoming HTTP cookie named 'theme' within a Next.js Server Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

LANGUAGE: js
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

----------------------------------------

TITLE: Read Request Headers from `NextRequest` Web API in Next.js
DESCRIPTION: This example illustrates how to read request headers directly from the `NextRequest` object's `headers` property, providing access to the underlying Web API `Headers` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { type NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const requestHeaders = new Headers(request.headers)
}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request) {
  const requestHeaders = new Headers(request.headers)
}
```

----------------------------------------

TITLE: Configure trailingSlash in Next.js
DESCRIPTION: To configure Next.js to redirect URLs without trailing slashes to their counterparts with trailing slashes, open `next.config.js` and add the `trailingSlash` configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/trailingSlash.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  trailingSlash: true,
}
```

----------------------------------------

TITLE: Stream Video Component with React Suspense (Simple Fallback)
DESCRIPTION: This example shows how to integrate the video Server Component into a Next.js page using React Suspense. It provides a basic text fallback (`Loading video...`) that is displayed while the video component is being streamed, preventing the page from blocking.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/videos.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import VideoComponent from '../ui/VideoComponent.jsx'

export default function Page() {
  return (
    <section>
      <Suspense fallback={<p>Loading video...</p>}>
        <VideoComponent />
      </Suspense>
      {/* Other content of the page */}
    </section>
  )
}
```

----------------------------------------

TITLE: Generate Supabase Image URL with Next.js Loader
DESCRIPTION: This JavaScript function constructs an image URL for Supabase Storage, applying specified width and quality parameters. It's designed to be used as a custom image loader in Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/images.mdx#_snippet_15

LANGUAGE: javascript
CODE:
```
// Docs: https://supabase.com/docs/guides/storage/image-transformations#nextjs-loader
export default function supabaseLoader({ src, width, quality }) {
  const url = new URL(`https://example.com${src}`)
  url.searchParams.set('width', width.toString())
  url.searchParams.set('quality', (quality || 75).toString())
  return url.href
}
```

----------------------------------------

TITLE: Configure package.json for Server-Side Debugging
DESCRIPTION: Modifies the `dev` script in `package.json` to automatically include the `--inspect` flag when running `npm run dev` or `yarn dev`, streamlining the server-side debugging setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "NODE_OPTIONS='--inspect' next dev"
  }
}
```

----------------------------------------

TITLE: Enable SVG Image Serving in Next.js
DESCRIPTION: `dangerouslyAllowSVG` allows Next.js to serve SVG images, which are not optimized by default due to their vector nature and potential security vulnerabilities. It's recommended to use the `unoptimized` prop for SVGs and configure `contentDispositionType` and `contentSecurityPolicy` for enhanced security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_34

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    dangerouslyAllowSVG: true,
  },
}
```

LANGUAGE: jsx
CODE:
```
<Image src="/my-image.svg" unoptimized />
```

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },
}
```

----------------------------------------

TITLE: Define a Next.js Page Component with params and searchParams
DESCRIPTION: The `page` file allows you to define UI that is unique to a route by default exporting a component. This component can receive `params` for dynamic route segments and `searchParams` for URL query parameters, both of which are promises.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  return <h1>My Page</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page({ params, searchParams }) {
  return <h1>My Page</h1>
}
```

----------------------------------------

TITLE: Offload Script to Web Worker using Next.js Script Component
DESCRIPTION: This example demonstrates how to use the `Script` component from `next/script` with `strategy="worker"`. This automatically instantiates Partytown and offloads the specified external script to a web worker, dedicating the main thread to your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function Home() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="worker" />
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Home() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="worker" />
    </>
  )
}
```

----------------------------------------

TITLE: Full Next.js API Route for Manual Draft Mode Testing
DESCRIPTION: A complete TypeScript example of a Next.js API route (`pages/api/draft.ts`) designed for manual testing of Draft Mode. When accessed, it enables Draft Mode and sends a confirmation message, allowing developers to observe the `__prerender_bypass` cookie.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
// simple example for testing it manually from your browser.
export default function handler(req, res) {
  res.setDraftMode({ enable: true })
  res.end('Draft mode is enabled')
}
```

----------------------------------------

TITLE: Next.js On-demand Revalidation with `revalidatePath` (Server Action)
DESCRIPTION: This example shows how to use the `revalidatePath` function within a Next.js Server Action to invalidate the cache for a specific route on demand. This is useful for clearing cached data after an update, such as adding a new post, ensuring fresh data is fetched on subsequent requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  // Invalidate the /posts route in the cache
  revalidatePath('/posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  // Invalidate the /posts route in the cache
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Define Environment Variables in .env File
DESCRIPTION: This snippet shows how to define environment variables in a `.env` file, which Next.js automatically loads into `process.env` for server-side access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_0

LANGUAGE: txt
CODE:
```
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
```

----------------------------------------

TITLE: Revalidating A Layout Path with revalidatePath
DESCRIPTION: This example illustrates how to revalidate any URL that matches a provided layout file. This action will also cause pages beneath with the same layout to revalidate on their next visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/[slug]', 'layout')
// or with route groups
revalidatePath('/(main)/post/[slug]', 'layout')
```

----------------------------------------

TITLE: Configuring remark and rehype Plugins in Next.js
DESCRIPTION: Illustrates how to set up remark and rehype plugins within `next.config.mjs` using `@next/mdx` to transform MDX content. This example specifically adds `remark-gfm` for GitHub Flavored Markdown support, noting the requirement for ESM configuration files (`.mjs` or `.ts`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_27

LANGUAGE: js
CODE:
```
import remarkGfm from 'remark-gfm'
import createMDX from '@next/mdx'

/** @type {import('next').NextConfig} */
const nextConfig = {
  // Allow .mdx extensions for files
  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],
  // Optionally, add any other Next.js config below
}

const withMDX = createMDX({
  // Add markdown plugins here, as desired
  options: {
    remarkPlugins: [remarkGfm],
    rehypePlugins: [],
  },
})

// Combine MDX and Next.js config
export default withMDX(nextConfig)
```

----------------------------------------

TITLE: Access Request Data in Next.js App Directory with headers and cookies
DESCRIPTION: Illustrates how to use the `headers` and `cookies` functions from `next/headers` within Server Components in the `app` directory to retrieve request headers and cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_18

LANGUAGE: typescript
CODE:
```
// `app` directory
import { cookies, headers } from 'next/headers'

async function getData() {
  const authHeader = (await headers()).get('authorization')

  return '...'
}

export default async function Page() {
  // You can use `cookies` or `headers` inside Server Components
  // directly or in your data fetching function
  const theme = (await cookies()).get('theme')
  const data = await getData()
  return '...'
}
```

LANGUAGE: javascript
CODE:
```
// `app` directory
import { cookies, headers } from 'next/headers'

async function getData() {
  const authHeader = (await headers()).get('authorization')

  return '...'
}

export default async function Page() {
  // You can use `cookies` or `headers` inside Server Components
  // directly or in your data fetching function
  const theme = (await cookies()).get('theme')
  const data = await getData()
  return '...'
}
```

----------------------------------------

TITLE: Using `href` Prop with Object for Query Parameters
DESCRIPTION: Illustrates how to use the `href` prop with an object to define the navigation path and include query parameters. This method allows for more dynamic link generation, demonstrated for both App Router and Pages Router contexts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Home() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Home() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      About
    </Link>
  )
}
```

----------------------------------------

TITLE: Encrypt and Decrypt User Sessions with Jose in Next.js
DESCRIPTION: This code snippet provides functions for encrypting and decrypting session payloads using the Jose library. The `encrypt` function signs a JWT with a given payload, setting an expiration time of 7 days. The `decrypt` function verifies the session JWT and extracts the payload. Both functions are marked with `server-only` to ensure they execute exclusively on the server, enhancing security. It requires `jose` and `server-only` packages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'
import { SessionPayload } from '@/app/lib/definitions'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload: SessionPayload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session: string | undefined = '') {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session) {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

----------------------------------------

TITLE: Read FormData in Next.js Route Handler
DESCRIPTION: Demonstrates how to read `FormData` from an incoming request in a Next.js Route Handler. It shows extracting 'name' and 'email' fields and returning them as JSON. The snippet highlights the string nature of `formData` values and suggests `zod-form-data` for type validation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_18

LANGUAGE: js
CODE:
```
export async function POST(request) {
  const formData = await request.formData()
  const name = formData.get('name')
  const email = formData.get('email')
  return Response.json({ name, email })
}
```

----------------------------------------

TITLE: Generated Open Graph Image HTML Meta Tags
DESCRIPTION: This HTML snippet shows the meta tags that are generated in the `<head>` section of a webpage when an Open Graph image is programmatically created using Next.js's `opengraph-image` convention. It includes properties for the image URL, alt text, type, width, and height.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_7

LANGUAGE: html
CODE:
```
<meta property="og:image" content="<generated>" />
<meta property="og:image:alt" content="About Acme" />
<meta property="og:image:type" content="image/png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
```

----------------------------------------

TITLE: Next.js Open Graph and Twitter Image Metadata Conventions
DESCRIPTION: Specifies the file naming and type conventions for defining Open Graph and Twitter images in Next.js, supporting both static image files and dynamically generated images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
`opengraph-image`: `.jpg` `.jpeg` `.png` `.gif` - Open Graph image file
`opengraph-image`: `.js` `.ts` `.tsx` - Generated Open Graph image
`twitter-image`: `.jpg` `.jpeg` `.png` `.gif` - Twitter image file
`twitter-image`: `.js` `.ts` `.tsx` - Generated Twitter image
```

----------------------------------------

TITLE: Fetch User Data in Next.js Layouts
DESCRIPTION: Demonstrates how to fetch user data within a Next.js `app/layout` component. This approach allows the layout to access user information while deferring the actual authentication check to a separate Data Access Layer (DAL) function, ensuring the check is performed closer to the data source.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_28

LANGUAGE: tsx
CODE:
```
export default async function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  const user = await getUser();

  return (
    // ...
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Layout({ children }) {
  const user = await getUser();

  return (
    // ...
  )
}
```

----------------------------------------

TITLE: Using new Next.js routing hooks in Client Components
DESCRIPTION: Demonstrates how to import and use the `useRouter`, `usePathname`, and `useSearchParams` hooks from `next/navigation` within a Next.js Client Component in the `app` directory. These hooks are used for programmatic navigation, accessing the current URL path, and retrieving URL search parameters, respectively. Note that these hooks are only supported in Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // ...
}
```

----------------------------------------

TITLE: Read Current Pathname with usePathname Hook
DESCRIPTION: Demonstrates how to use the `usePathname` hook in a Client Component to retrieve and display the current URL's pathname. This hook is essential for client-side routing awareness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-pathname.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}
```

----------------------------------------

TITLE: Next.js Server Actions Security Practices
DESCRIPTION: Ensure users are authorized to call Server Actions by reviewing and implementing recommended security practices for Next.js Server Components and Actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_20

LANGUAGE: APIDOC
CODE:
```
Next.js Server Actions (Security):
  Purpose: Ensure authorization for Server Action calls.
  Recommendation: Implement robust authorization checks.
```

----------------------------------------

TITLE: Next.js `<Image>` Component API Overview
DESCRIPTION: Overview of the Next.js `<Image>` component, highlighting its benefits like automatic optimization and dimension setting, and potential issues with styling. It also notes the option to migrate from standard `<img>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_19

LANGUAGE: APIDOC
CODE:
```
Next.js `<Image>` component:
  - Benefits: Automatic image optimization, automatic `width` and `height` attributes (prevents layout shifts).
  - Potential Issues: Can cause distortion if only one dimension is styled without the other styled to `auto`.
  - Usage: Can be used directly with static image imports or migrate from existing `<img>` tags.
  - Optimization: Supports configuring a loader or using the default Next.js server for automatic image optimization.
```

----------------------------------------

TITLE: Memoizing Fetch Requests in Next.js React Components
DESCRIPTION: This example demonstrates how Next.js automatically memoizes `fetch` calls with identical URLs and options. This allows calling the same data fetching function multiple times within a React component tree, but the network request is only executed once, improving performance. The example shows a `cache MISS` on the first call and a `cache HIT` on subsequent calls within the same render pass.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

LANGUAGE: jsx
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

----------------------------------------

TITLE: Configure Jest with next/jest
DESCRIPTION: Update your Jest configuration file to use `next/jest`. This transformer provides all necessary configurations for Jest to work seamlessly with Next.js, including setting up transforms, auto-mocking assets, and loading environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Config } from 'jest'
import nextJest from 'next/jest.js'

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config: Config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
export default createJestConfig(config)
```

LANGUAGE: javascript
CODE:
```
const nextJest = require('next/jest')

/** @type {import('jest').Config} */
const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(config)
```

----------------------------------------

TITLE: Read Request Headers with `next/headers` in Next.js
DESCRIPTION: This example shows how to access incoming request headers using the `headers()` function from `next/headers`. The returned headers instance is read-only, suitable for inspecting request metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const headersList = await headers()
  const referer = headersList.get('referer')
}
```

LANGUAGE: javascript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')
}
```

----------------------------------------

TITLE: Create a basic Next.js Route Handler for Draft Mode
DESCRIPTION: This snippet demonstrates how to set up a basic GET Route Handler in Next.js, which serves as the entry point for enabling Draft Mode. It returns an empty response initially.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export async function GET(request: Request) {
  return new Response('')
}
```

LANGUAGE: JavaScript
CODE:
```
export async function GET() {
  return new Response('')
}
```

----------------------------------------

TITLE: Update and Refresh Next.js User Session Cookie
DESCRIPTION: Shows how to extend an existing user session's expiration time by re-setting the session cookie. This is useful for keeping users logged in and refreshing their session upon subsequent application access, often after they access the application again.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_17

LANGUAGE: ts
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'

export async function updateSession() {
  const session = (await cookies()).get('session')?.value
  const payload = await decrypt(session)

  if (!session || !payload) {
    return null
  }

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expires,
    sameSite: 'lax',
    path: '/',
  })
}
```

LANGUAGE: js
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'

export async function updateSession() {
  const session = (await cookies()).get('session')?.value
  const payload = await decrypt(session)

  if (!session || !payload) {
    return null
  }

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)(
    await cookies()
  ).set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expires,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Cloudinary Custom Image Loader Function
DESCRIPTION: Example custom image loader function for Cloudinary. It constructs an image URL using Cloudinary's transformation parameters like `f_auto`, `c_limit`, `w_`, and `q_`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/images.mdx#_snippet_5

LANGUAGE: js
CODE:
```
// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpg
export default function cloudinaryLoader({ src, width, quality }) {
  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]
  return `https://example.com/${params.join(',')}${src}`
}
```

----------------------------------------

TITLE: VS Code Launch Configurations for Next.js Debugging
DESCRIPTION: This JSON configuration file, placed at `.vscode/launch.json`, defines various debugging setups for a Next.js application within VS Code. It includes configurations for debugging the server-side (Node.js), client-side (Chrome/Firefox), and a combined full-stack debugging experience, allowing developers to attach to both Node.js and browser processes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug server-side",
      "type": "node-terminal",
      "request": "launch",
      "command": "npm run dev"
    },
    {
      "name": "Next.js: debug client-side",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000"
    },
    {
      "name": "Next.js: debug client-side (Firefox)",
      "type": "firefox",
      "request": "launch",
      "url": "http://localhost:3000",
      "reAttach": true,
      "pathMappings": [
        {
          "url": "webpack://_N_E",
          "path": "${workspaceFolder}"
        }
      ]
    },
    {
      "name": "Next.js: debug full stack",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/next/dist/bin/next",
      "runtimeArgs": ["--inspect"],
      "skipFiles": ["<node_internals>/**"],
      "serverReadyAction": {
        "action": "debugWithEdge",
        "killOnServerStop": true,
        "pattern": "- Local:.+(https?://.+)",
        "uriFormat": "%s",
        "webRoot": "${workspaceFolder}"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Configure Content Security Policy (CSP) without Nonces in next.config.js
DESCRIPTION: This snippet shows how to define a Content Security Policy (CSP) header directly in `next.config.js` for Next.js applications that do not require dynamic nonces. It specifies various source directives for different content types, such as `script-src` and `style-src`, and applies the CSP globally via the `headers` configuration. This approach is suitable for static CSP enforcement.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_4

LANGUAGE: js
CODE:
```
const cspHeader = `
    default-src 'self';
    script-src 'self' 'unsafe-eval' 'unsafe-inline';
    style-src 'self' 'unsafe-inline';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`

module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: cspHeader.replace(/\n/g, ''),
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Integrate Google Tag Manager in Next.js App Router Root Layout
DESCRIPTION: Example demonstrating how to include the `GoogleTagManager` component in the `app/layout.tsx` or `app/layout.js` file. This loads GTM for all routes in a Next.js App Router application by placing it in the root layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <GoogleTagManager gtmId="GTM-XYZ" />
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleTagManager } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <GoogleTagManager gtmId="GTM-XYZ" />
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js App Icon Metadata File Conventions
DESCRIPTION: Describes the file naming and type conventions for defining various application icons in Next.js, including favicons, general app icons, and Apple app icons, supporting both static files and generated icons.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_7

LANGUAGE: APIDOC
CODE:
```
`favicon`: `.ico` - Favicon file
`icon`: `.ico` `.jpg` `.jpeg` `.png` `.svg` - App Icon file
`icon`: `.js` `.ts` `.tsx` - Generated App Icon
`apple-icon`: `.jpg` `.jpeg`, `.png` - Apple App Icon file
`apple-icon`: `.js` `.ts` `.tsx` - Generated Apple App Icon
```

----------------------------------------

TITLE: Generate Bundle Analysis Report
DESCRIPTION: Commands to run the Next.js build process with the `ANALYZE` environment variable set to 'true', which triggers the bundle analyzer to generate and open reports in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
ANALYZE=true npm run build
```

LANGUAGE: bash
CODE:
```
ANALYZE=true yarn build
```

LANGUAGE: bash
CODE:
```
ANALYZE=true pnpm build
```