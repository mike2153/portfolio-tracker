"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from dotenv import load_dotenv
from pathlib import Path
import os           
import dj_database_url
load_dotenv() 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Hosts the app can serve
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'api.apps.ApiConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.middleware.SupabaseLoggingMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'supabase_formatter': {
            'format': 'Superbase -> Backend: {message}',
            'style': '{',
        },
        'backend_formatter': {
            'format': 'Backend -> Superbase: {message}',
            'style': '{',
        },
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'db_handler': {
            'class': 'logging.StreamHandler',
            'formatter': 'backend_formatter',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['db_handler'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}


# Database
                                                               

# Always use Supabase PostgreSQL (both local development and production)
# The DATABASE_URL env var must be set
DATABASES = {
    'default': dj_database_url.config(
        env='DATABASE_URL',
        conn_max_age=600
    )
}


# Password validation
                                                                              

AUTH_PASSWORD_VALIDATORS = [
     
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
      
     
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
      
     
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
      
     
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
      
]
# Internationalization
                                                
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Next.js dev server
    # add your production frontend URL(s) here
]
CORS_ALLOW_CREDENTIALS = True
# API Keys & Service Secrets (injected via environment variables)
#FINNHUB_API_KEY        = os.environ['FINNHUB_API_KEY']
ALPHA_VANTAGE_API_KEY  = os.environ['ALPHA_VANTAGE_API_KEY']       
SUPABASE_URL             = os.environ['SUPABASE_URL']
SUPABASE_JWT_SECRET      = os.environ['SUPABASE_JWT_SECRET']
SUPABASE_SERVICE_ROLE_KEY= os.environ['SUPABASE_SERVICE_ROLE_KEY']
