name: 📚 Documentation Validation Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend_simplified/**/*.py'
      - 'frontend/src/**/*.ts'
      - 'frontend/src/**/*.tsx'
      - 'docs/**/*.md'
      - 'scripts/generate_api_docs.py'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  validate-documentation:
    name: 🔍 Validate Documentation Consistency
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Python Dependencies
        run: |
          cd backend_simplified
          pip install -r requirements.txt
      
      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install Node Dependencies
        run: |
          cd frontend
          npm ci
      
      - name: 🔧 Generate Fresh API Documentation
        run: |
          # Set required environment variables for documentation generation
          export SUPA_API_URL="https://placeholder.supabase.co"
          export SUPA_API_ANON_KEY="placeholder-key"
          export VANTAGE_API_KEY="placeholder-key"
          
          python scripts/generate_api_docs.py
      
      - name: 📋 Check for Documentation Drift
        run: |
          echo "🔍 Checking for documentation drift..."
          
          # Check if generated files differ from committed versions
          if git diff --exit-code docs/api_doc.md; then
            echo "✅ API documentation is up to date"
          else
            echo "❌ API documentation is out of date!"
            echo "📝 Generated documentation differs from committed version"
            echo "🔧 Run 'python scripts/generate_api_docs.py' and commit the changes"
            exit 1
          fi
          
          if git diff --exit-code docs/openapi.json; then
            echo "✅ OpenAPI specification is up to date"
          else
            echo "❌ OpenAPI specification is out of date!"
            echo "📝 Generated OpenAPI spec differs from committed version"
            echo "🔧 Run 'python scripts/generate_api_docs.py' and commit the changes"
            exit 1
          fi
          
          if git diff --exit-code frontend/src/types/generated-api.ts; then
            echo "✅ TypeScript types are up to date"
          else
            echo "❌ TypeScript types are out of date!"
            echo "📝 Generated types differ from committed version"
            echo "🔧 Run 'python scripts/generate_api_docs.py' and commit the changes"
            exit 1
          fi
      
      - name: 🔍 Validate OpenAPI Specification
        run: |
          echo "🔍 Validating OpenAPI specification..."
          
          # Check if OpenAPI file exists and is valid JSON
          if [ ! -f "docs/openapi.json" ]; then
            echo "❌ OpenAPI specification file not found!"
            exit 1
          fi
          
          # Validate JSON structure
          if ! python -m json.tool docs/openapi.json > /dev/null; then
            echo "❌ OpenAPI specification is not valid JSON!"
            exit 1
          fi
          
          # Check required OpenAPI fields
          python -c "
          import json
          with open('docs/openapi.json') as f:
              spec = json.load(f)
          
          required_fields = ['openapi', 'info', 'paths']
          missing = [field for field in required_fields if field not in spec]
          
          if missing:
              print(f'❌ Missing required OpenAPI fields: {missing}')
              exit(1)
          
          if not spec.get('paths'):
              print('❌ No API paths defined in OpenAPI specification')
              exit(1)
          
          print(f'✅ OpenAPI specification is valid ({len(spec.get(\"paths\", {}))} endpoints)')
          "
      
      - name: 🧪 TypeScript Type Validation
        run: |
          echo "🔍 Validating TypeScript types..."
          
          cd frontend
          
          # Check for TypeScript compilation errors
          if npx tsc --noEmit --strict; then
            echo "✅ TypeScript compilation successful"
          else
            echo "❌ TypeScript compilation failed!"
            echo "🔧 Fix TypeScript errors before proceeding"
            exit 1
          fi
          
          # Check for 'any' types (zero tolerance)
          if grep -r "any" src/types/generated-api.ts; then
            echo "❌ Found 'any' types in generated API types!"
            echo "🔧 Auto-generated types should be strongly typed"
            exit 1
          else
            echo "✅ No 'any' types found in generated API types"
          fi
      
      - name: 📊 Documentation Coverage Report
        run: |
          echo "📊 Generating documentation coverage report..."
          
          python -c "
          import json
          
          with open('docs/openapi.json') as f:
              spec = json.load(f)
          
          paths = spec.get('paths', {})
          total_operations = 0
          documented_operations = 0
          
          for path, methods in paths.items():
              for method, operation in methods.items():
                  if method.upper() in ['GET', 'POST', 'PUT', 'DELETE', 'PATCH']:
                      total_operations += 1
                      if operation.get('description'):
                          documented_operations += 1
          
          coverage = (documented_operations / total_operations * 100) if total_operations > 0 else 0
          
          print(f'📋 Documentation Coverage: {coverage:.1f}% ({documented_operations}/{total_operations})')
          
          if coverage < 80:
              print('⚠️  Documentation coverage below 80% threshold')
              print('🔧 Add descriptions to API endpoints for better documentation')
          else:
              print('✅ Documentation coverage meets quality standards')
          "
      
      - name: 🔒 Security Documentation Validation
        run: |
          echo "🔒 Validating security documentation..."
          
          # Check if security documentation exists
          if [ ! -f "docs/supabase.md" ]; then
            echo "❌ Security documentation (supabase.md) not found!"
            exit 1
          fi
          
          # Check for required security sections
          security_sections=(
            "Row Level Security"
            "Authentication"
            "RLS"
            "Migration 008"
          )
          
          for section in "${security_sections[@]}"; do
            if ! grep -qi "$section" docs/supabase.md; then
              echo "⚠️  Security section '$section' not found in documentation"
            else
              echo "✅ Security section '$section' documented"
            fi
          done
      
      - name: 📤 Upload Documentation Artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: documentation-diff
          path: |
            docs/api_doc.md
            docs/openapi.json
            frontend/src/types/generated-api.ts
          retention-days: 7

  validate-links:
    name: 🔗 Validate Documentation Links
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔗 Check Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'no'
          config-file: '.github/markdown-link-check-config.json'
          folder-path: 'docs'
          max-depth: 2

  type-safety-validation:
    name: 🔒 Type Safety Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install Dependencies
        run: |
          cd backend_simplified
          pip install mypy types-requests
          cd ../frontend
          npm ci
      
      - name: 🔍 Backend Type Safety Check
        run: |
          echo "🔍 Checking backend type safety..."
          cd backend_simplified
          
          # Run mypy with strict settings
          if mypy --strict --no-error-summary .; then
            echo "✅ Backend passes strict type checking"
          else
            echo "❌ Backend type safety violations detected!"
            exit 1
          fi
      
      - name: 🔍 Frontend Type Safety Check
        run: |
          echo "🔍 Checking frontend type safety..."
          cd frontend
          
          # Check for 'any' types (zero tolerance)
          if find src -name "*.ts" -o -name "*.tsx" | xargs grep -l "any" | grep -v "generated-api.ts"; then
            echo "❌ Found 'any' types in frontend code!"
            echo "🔧 Replace 'any' with proper types"
            exit 1
          else
            echo "✅ No 'any' types found in frontend code"
          fi
          
          # Run TypeScript compilation
          if npx tsc --noEmit --strict; then
            echo "✅ Frontend passes strict type checking"
          else
            echo "❌ Frontend type safety violations detected!"
            exit 1
          fi

  documentation-quality-gate:
    name: 🚪 Documentation Quality Gate
    runs-on: ubuntu-latest
    needs: [validate-documentation, validate-links, type-safety-validation]
    if: always()
    
    steps:
      - name: 📊 Check Quality Gate Status
        run: |
          echo "📊 Documentation Quality Gate Results:"
          echo "======================================"
          
          if [ "${{ needs.validate-documentation.result }}" = "success" ]; then
            echo "✅ Documentation validation: PASSED"
          else
            echo "❌ Documentation validation: FAILED"
          fi
          
          if [ "${{ needs.validate-links.result }}" = "success" ]; then
            echo "✅ Link validation: PASSED"
          else
            echo "❌ Link validation: FAILED"
          fi
          
          if [ "${{ needs.type-safety-validation.result }}" = "success" ]; then
            echo "✅ Type safety validation: PASSED"
          else
            echo "❌ Type safety validation: FAILED"
          fi
          
          # Fail if any validation failed
          if [ "${{ needs.validate-documentation.result }}" != "success" ] || 
             [ "${{ needs.validate-links.result }}" != "success" ] || 
             [ "${{ needs.type-safety-validation.result }}" != "success" ]; then
            echo ""
            echo "❌ DOCUMENTATION QUALITY GATE FAILED"
            echo "🔧 Fix the above issues before merging"
            exit 1
          else
            echo ""
            echo "✅ DOCUMENTATION QUALITY GATE PASSED"
            echo "🎉 All documentation and type safety checks successful!"
          fi