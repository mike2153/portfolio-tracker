LLM Task: Refactor a Python FastAPI Backend for a Portfolio Tracker
Project Overview
You are tasked with refactoring a Python-based backend for a financial portfolio tracking application. The current application is functional but has several areas for improvement regarding code structure, efficiency, and accuracy. The goal of this refactoring is to simplify the codebase, eliminate redundant calculations, fix inaccuracies in financial metrics, and improve overall performance and maintainability by consolidating logic into a clear, service-oriented architecture.

The backend uses FastAPI, Supabase for the database, and the Alpha Vantage API for financial data.

The 4-Step Refactoring Plan
Your primary task is to execute the following four-step plan:

Create a Single PriceManager: Consolidate all price-fetching, market status checks, and price-caching logic into a single, authoritative service.

Create the PortfolioMetricsManager: Implement a new central orchestrator that will serve as the single entry point for all portfolio-related data requests. This manager will handle caching of the final, calculated results.

Fix and Consolidate the PortfolioCalculator: Merge the existing PortfolioService and PortfolioCalculator into one service. This new service will be responsible for all financial mathematics and will correct the existing flaws in cost basis and P&L calculations.

Update API Routes: Simplify the FastAPI endpoints to use the new PortfolioMetricsManager, making them cleaner and more efficient.

Current File Structure (For Context)
backend_simplified/
├── services/
│   ├── portfolio_calculator.py
│   ├── portfolio_service.py
│   ├── price_data_service.py
│   ├── current_price_manager.py
│   └── market_status_service.py
└── backend_api_routes/
    ├── backend_api_dashboard.py
    └── backend_api_analytics.py
Desired New File Structure
backend_simplified/
└── services/
    ├── portfolio_metrics_manager.py
    ├── portfolio_calculator.py
    ├── price_manager.py
    ├── dividend_service.py
    └── financials_service.py
Detailed Instructions & Responsibilities
Step 1: Create the PriceManager
Create a new file named services/price_manager.py.

Create a PriceManager class within this file.

Move all methods and logic from the following files into the new PriceManager class:

services/current_price_manager.py

services/price_data_service.py

services/market_status_service.py

The new PriceManager must be the only file responsible for:

Checking if a market is open or closed.

Fetching real-time and historical prices from Alpha Vantage.

Managing the caching of raw price data in the Supabase database.

Handling API rate limiting for price-related requests.

After moving the logic, delete the following files: current_price_manager.py, price_data_service.py, and market_status_service.py.

Step 2: Create the PortfolioMetricsManager
Create a new file named services/portfolio_metrics_manager.py.

Implement the PortfolioMetricsManager class as outlined in the provided design document.

The manager's primary method, get_portfolio_metrics, must orchestrate the entire process of calculating a user's portfolio.

This manager must implement a caching layer for the final, calculated portfolio metrics. This cache should be stored in the Supabase database (in a new table, e.g., portfolio_metrics_cache).

This manager will be the single entry point that the API routes will call.

Step 3: Fix and Consolidate the PortfolioCalculator
Open the existing file services/portfolio_calculator.py. This will be the home for all financial mathematics.

Delete the _process_transactions function. It is inaccurate.

Modify the class to exclusively use the _process_transactions_with_realized_gains method for processing all user transactions. This is critical for ensuring accurate cost basis and P&L calculations.

Move all time-series calculation logic from services/portfolio_service.py into this calculator.

Implement the proper XIRR (eXtended Internal Rate of Return) and daily change calculations within this class, replacing the current simplified versions.

After consolidating the logic, delete the file services/portfolio_service.py.

Step 4: Update API Routes
Modify backend_api_routes/backend_api_dashboard.py and backend_api_routes/backend_api_analytics.py.

Remove the existing logic where these endpoints call multiple services.

Update each relevant API endpoint to make a single call to the new PortfolioMetricsManager. The manager will return a complete, standardized data object that the API can then send back as a response.