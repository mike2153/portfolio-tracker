### LLM Task: Execute Step 4 - Update API Routes

#### **Goal:**

The goal of this final step is to simplify our FastAPI endpoints. We will refactor the API route handlers in `backend_api_dashboard.py` and `backend_api_analytics.py` to use our new, centralized `PortfolioMetricsManager`.

#### **Why We Are Doing This:**

Our current API endpoints are doing too much work. They contain business logic that involves calling multiple different services and stitching data together to form a response. This makes the routes brittle, hard to test, and inefficient.

The API layer should be as "thin" as possible. Its only job is to handle incoming web requests, call the appropriate service to do the actual work, and then format the result into a response. This change will make our API routes clean, simple, and easy to read.

#### **What Needs to Be Done:**

1.  **Modify API Route Handlers**: Go into `backend_api_routes/backend_api_dashboard.py` and `backend_api_routes/backend_api_analytics.py`.
2.  **Remove Old Logic**: In each relevant endpoint (e.g., `/dashboard`, `/analytics/summary`), delete the existing code that makes multiple service calls.
3.  **Single Manager Call**: Replace the deleted code with a single `await` call to the appropriate method on the `PortfolioMetricsManager` (e.g., `metrics_manager.get_portfolio_metrics(...)`).
4.  **Format Response**: Ensure the data returned from the manager is correctly structured and sent back to the client. The manager should return a complete data object, so this step should be minimal.

#### **What Steps Must Be Taken Carefully:**

* **API Contract**: The structure of the JSON response sent back to the frontend must remain consistent to avoid breaking the user interface. You must ensure that the new `PortfolioMetrics` object returned by the manager maps correctly to the expected API response. The `Pydantic` models in your design document will be crucial for this.
* **Authentication and User ID**: The user's authentication data (specifically their ID and JWT token) must be correctly extracted from the request and passed down to the `PortfolioMetricsManager` on every call. This is critical for security and for fetching the correct user's data.
* **Error Handling**: The API routes must be prepared to catch any exceptions that might be raised by the `PortfolioMetricsManager` (e.g., if a user's portfolio cannot be found) and return a proper HTTP error code and message (e.g., 404 Not Found or 500 Internal Server Error).

---

#### **LLM Task & Questions:**

Now, as the Language Model executing this task:

1.  **Give me your opinion** on this approach. Is making the API routes this "thin" and delegating all work to a manager the correct design pattern for a FastAPI application? What are the trade-offs?
2.  **Explain your understanding** of the role of an API route handler in a modern, service-oriented backend architecture.
3.  **How can you make this plan even better?** Suggest a specific improvement to the API layer. For example, how would you design the FastAPI dependencies to provide the `PortfolioMetricsManager` to the route handlers? Or, what is the best practice for handling response models to ensure the API contract is strictly enforced?